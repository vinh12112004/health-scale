
PJ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005484  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005634  08005634  00006634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056bc  080056bc  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056bc  080056bc  000066bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c4  080056c4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c4  080056c4  000066c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080056cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          000049d0  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200049e0  200049e0  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010af8  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c29  00000000  00000000  00017b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  0001a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7c  00000000  00000000  0001b690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003041  00000000  00000000  0001c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001037c  00000000  00000000  0001f24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc3b  00000000  00000000  0002f5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b204  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003de8  00000000  00000000  0010b248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0010f030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800561c 	.word	0x0800561c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	0800561c 	.word	0x0800561c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fcdc 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f828 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f8cc 	bl	80006c4 <MX_GPIO_Init>
  MX_SPI4_Init();
 800052c:	f000 f894 	bl	8000658 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  TM_MFRC522_Init();
 8000530:	f000 f9e6 	bl	8000900 <TM_MFRC522_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f002 fab8 	bl	8002aa8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <main+0x44>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	@ (8000564 <main+0x48>)
 800053e:	f002 fafd 	bl	8002b3c <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a08      	ldr	r2, [pc, #32]	@ (8000568 <main+0x4c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of ReadRFID */
  ReadRFIDHandle = osThreadNew(StartReadRFID, NULL, &ReadRFID_attributes);
 8000548:	4a08      	ldr	r2, [pc, #32]	@ (800056c <main+0x50>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	@ (8000570 <main+0x54>)
 800054e:	f002 faf5 	bl	8002b3c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a07      	ldr	r2, [pc, #28]	@ (8000574 <main+0x58>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f002 faca 	bl	8002af0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x40>
 8000560:	08005664 	.word	0x08005664
 8000564:	08000769 	.word	0x08000769
 8000568:	20000084 	.word	0x20000084
 800056c:	08005688 	.word	0x08005688
 8000570:	08000779 	.word	0x08000779
 8000574:	20000088 	.word	0x20000088

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 f80e 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <SystemClock_Config+0xd8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000650 <SystemClock_Config+0xd8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <SystemClock_Config+0xd8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b25      	ldr	r3, [pc, #148]	@ (8000654 <SystemClock_Config+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a24      	ldr	r2, [pc, #144]	@ (8000654 <SystemClock_Config+0xdc>)
 80005c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <SystemClock_Config+0xdc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e8:	2304      	movs	r3, #4
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005ec:	23b4      	movs	r3, #180	@ 0xb4
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 ffdb 	bl	80015b8 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f8c6 	bl	8000798 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800060c:	f000 ff84 	bl	8001518 <HAL_PWREx_EnableOverDrive>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000616:	f000 f8bf 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000626:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000630:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	2105      	movs	r1, #5
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fa35 	bl	8001aa8 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000644:	f000 f8a8 	bl	8000798 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	@ 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_SPI4_Init+0x64>)
 800065e:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <MX_SPI4_Init+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000668:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_SPI4_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_SPI4_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000688:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_SPI4_Init+0x64>)
 800068c:	2218      	movs	r2, #24
 800068e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_SPI4_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_SPI4_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_SPI4_Init+0x64>)
 80006a4:	220a      	movs	r2, #10
 80006a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_SPI4_Init+0x64>)
 80006aa:	f001 fbe9 	bl	8001e80 <HAL_SPI_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80006b4:	f000 f870 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000002c 	.word	0x2000002c
 80006c0:	40013400 	.word	0x40013400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000760 <MX_GPIO_Init+0x9c>)
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_GPIO_Init+0x9c>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a18      	ldr	r2, [pc, #96]	@ (8000760 <MX_GPIO_Init+0x9c>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_GPIO_Init+0x9c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_GPIO_Init+0x9c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a11      	ldr	r2, [pc, #68]	@ (8000760 <MX_GPIO_Init+0x9c>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_GPIO_Init+0x9c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000734:	480b      	ldr	r0, [pc, #44]	@ (8000764 <MX_GPIO_Init+0xa0>)
 8000736:	f000 fed5 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800073a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800073e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	4619      	mov	r1, r3
 8000752:	4804      	ldr	r0, [pc, #16]	@ (8000764 <MX_GPIO_Init+0xa0>)
 8000754:	f000 fd1a 	bl	800118c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40021800 	.word	0x40021800

08000768 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f002 fa75 	bl	8002c60 <osDelay>
 8000776:	e7fb      	b.n	8000770 <StartDefaultTask+0x8>

08000778 <StartReadRFID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadRFID */
void StartReadRFID(void *argument)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadRFID */
	uint8_t CardID[5];
	osDelay(100);
 8000780:	2064      	movs	r0, #100	@ 0x64
 8000782:	f002 fa6d 	bl	8002c60 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	if(TM_MFRC522_Check(CardID) == MI_OK){
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f8de 	bl	800094c <TM_MFRC522_Check>
		//gui den sever
	}else{
		//hien led
	}
    osDelay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f002 fa65 	bl	8002c60 <osDelay>
	if(TM_MFRC522_Check(CardID) == MI_OK){
 8000796:	e7f6      	b.n	8000786 <StartReadRFID+0xe>

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_MspInit+0x54>)
 80007b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b2:	4a11      	ldr	r2, [pc, #68]	@ (80007f8 <HAL_MspInit+0x54>)
 80007b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x54>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <HAL_MspInit+0x54>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <HAL_MspInit+0x54>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <HAL_MspInit+0x54>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fca6 	bl	800113a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <HAL_SPI_MspInit+0x84>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d12b      	bne.n	8000876 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000826:	4a17      	ldr	r2, [pc, #92]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000828:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800082c:	6453      	str	r3, [r2, #68]	@ 0x44
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_SPI_MspInit+0x88>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000856:	2364      	movs	r3, #100	@ 0x64
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000866:	2305      	movs	r3, #5
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <HAL_SPI_MspInit+0x8c>)
 8000872:	f000 fc8b 	bl	800118c <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40013400 	.word	0x40013400
 8000884:	40023800 	.word	0x40023800
 8000888:	40021000 	.word	0x40021000

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x4>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 fb5b 	bl	8000f80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008ca:	f003 fdf1 	bl	80044b0 <xTaskGetSchedulerState>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d001      	beq.n	80008d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008d4:	f004 fbe8 	bl	80050a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	@ (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 8000904:	f000 f83c 	bl	8000980 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 8000908:	f000 f921 	bl	8000b4e <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800090c:	218d      	movs	r1, #141	@ 0x8d
 800090e:	202a      	movs	r0, #42	@ 0x2a
 8000910:	f000 f842 	bl	8000998 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 8000914:	213e      	movs	r1, #62	@ 0x3e
 8000916:	202b      	movs	r0, #43	@ 0x2b
 8000918:	f000 f83e 	bl	8000998 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800091c:	211e      	movs	r1, #30
 800091e:	202d      	movs	r0, #45	@ 0x2d
 8000920:	f000 f83a 	bl	8000998 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	202c      	movs	r0, #44	@ 0x2c
 8000928:	f000 f836 	bl	8000998 <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800092c:	2170      	movs	r1, #112	@ 0x70
 800092e:	2026      	movs	r0, #38	@ 0x26
 8000930:	f000 f832 	bl	8000998 <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8000934:	2140      	movs	r1, #64	@ 0x40
 8000936:	2015      	movs	r0, #21
 8000938:	f000 f82e 	bl	8000998 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800093c:	213d      	movs	r1, #61	@ 0x3d
 800093e:	2011      	movs	r0, #17
 8000940:	f000 f82a 	bl	8000998 <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8000944:	f000 f8ee 	bl	8000b24 <TM_MFRC522_AntennaOn>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8000954:	6879      	ldr	r1, [r7, #4]
 8000956:	2026      	movs	r0, #38	@ 0x26
 8000958:	f000 f901 	bl	8000b5e <TM_MFRC522_Request>
 800095c:	4603      	mov	r3, r0
 800095e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f9ed 	bl	8000d46 <TM_MFRC522_Anticoll>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8000970:	f000 fa6f 	bl	8000e52 <TM_MFRC522_Halt>

	return status;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <TM_MFRC522_InitPins+0x14>)
 800098a:	f000 fdab 	bl	80014e4 <HAL_GPIO_WritePin>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	71fb      	strb	r3, [r7, #7]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 80009a8:	2200      	movs	r2, #0
 80009aa:	2110      	movs	r1, #16
 80009ac:	481a      	ldr	r0, [pc, #104]	@ (8000a18 <TM_MFRC522_WriteRegister+0x80>)
 80009ae:	f000 fd99 	bl	80014e4 <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 80009c4:	f107 010e 	add.w	r1, r7, #14
 80009c8:	230a      	movs	r3, #10
 80009ca:	2201      	movs	r2, #1
 80009cc:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <TM_MFRC522_WriteRegister+0x84>)
 80009ce:	f001 fae0 	bl	8001f92 <HAL_SPI_Transmit>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80009d6:	bf00      	nop
 80009d8:	4810      	ldr	r0, [pc, #64]	@ (8000a1c <TM_MFRC522_WriteRegister+0x84>)
 80009da:	f001 fee0 	bl	800279e <HAL_SPI_GetState>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d0f7      	beq.n	80009d8 <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80009e8:	1db9      	adds	r1, r7, #6
 80009ea:	230a      	movs	r3, #10
 80009ec:	2201      	movs	r2, #1
 80009ee:	480b      	ldr	r0, [pc, #44]	@ (8000a1c <TM_MFRC522_WriteRegister+0x84>)
 80009f0:	f001 facf 	bl	8001f92 <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80009f4:	bf00      	nop
 80009f6:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <TM_MFRC522_WriteRegister+0x84>)
 80009f8:	f001 fed1 	bl	800279e <HAL_SPI_GetState>
 80009fc:	4603      	mov	r3, r0
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d0f7      	beq.n	80009f6 <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <TM_MFRC522_WriteRegister+0x80>)
 8000a0c:	f000 fd6a 	bl	80014e4 <HAL_GPIO_WritePin>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	2000002c 	.word	0x2000002c

08000a20 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	481f      	ldr	r0, [pc, #124]	@ (8000aac <TM_MFRC522_ReadRegister+0x8c>)
 8000a30:	f000 fd58 	bl	80014e4 <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a46:	b25b      	sxtb	r3, r3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8000a50:	f107 010d 	add.w	r1, r7, #13
 8000a54:	230a      	movs	r3, #10
 8000a56:	2201      	movs	r2, #1
 8000a58:	4815      	ldr	r0, [pc, #84]	@ (8000ab0 <TM_MFRC522_ReadRegister+0x90>)
 8000a5a:	f001 fa9a 	bl	8001f92 <HAL_SPI_Transmit>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000a62:	bf00      	nop
 8000a64:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <TM_MFRC522_ReadRegister+0x90>)
 8000a66:	f001 fe9a 	bl	800279e <HAL_SPI_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d0f7      	beq.n	8000a64 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8000a74:	f107 010e 	add.w	r1, r7, #14
 8000a78:	230a      	movs	r3, #10
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <TM_MFRC522_ReadRegister+0x90>)
 8000a7e:	f001 fbcc 	bl	800221a <HAL_SPI_Receive>
 8000a82:	4603      	mov	r3, r0
 8000a84:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8000a86:	bf00      	nop
 8000a88:	4809      	ldr	r0, [pc, #36]	@ (8000ab0 <TM_MFRC522_ReadRegister+0x90>)
 8000a8a:	f001 fe88 	bl	800279e <HAL_SPI_GetState>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d0f7      	beq.n	8000a88 <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2110      	movs	r1, #16
 8000a9c:	4803      	ldr	r0, [pc, #12]	@ (8000aac <TM_MFRC522_ReadRegister+0x8c>)
 8000a9e:	f000 fd21 	bl	80014e4 <HAL_GPIO_WritePin>

	return val;	
 8000aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ffaa 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000acc:	4603      	mov	r3, r0
 8000ace:	461a      	mov	r2, r3
 8000ad0:	79bb      	ldrb	r3, [r7, #6]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff5c 	bl	8000998 <TM_MFRC522_WriteRegister>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	460a      	mov	r2, r1
 8000af2:	71fb      	strb	r3, [r7, #7]
 8000af4:	4613      	mov	r3, r2
 8000af6:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff90 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b25a      	sxtb	r2, r3
 8000b04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	b25b      	sxtb	r3, r3
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	b25b      	sxtb	r3, r3
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff3e 	bl	8000998 <TM_MFRC522_WriteRegister>
} 
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8000b2a:	2014      	movs	r0, #20
 8000b2c:	f7ff ff78 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d103      	bne.n	8000b46 <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8000b3e:	2103      	movs	r1, #3
 8000b40:	2014      	movs	r0, #20
 8000b42:	f7ff ffb7 	bl	8000ab4 <TM_MFRC522_SetBitMask>
	}
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8000b52:	210f      	movs	r1, #15
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff ff1f 	bl	8000998 <TM_MFRC522_WriteRegister>
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af02      	add	r7, sp, #8
 8000b64:	4603      	mov	r3, r0
 8000b66:	6039      	str	r1, [r7, #0]
 8000b68:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	200d      	movs	r0, #13
 8000b6e:	f7ff ff13 	bl	8000998 <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	6839      	ldr	r1, [r7, #0]
 8000b84:	200c      	movs	r0, #12
 8000b86:	f000 f80f 	bl	8000ba8 <TM_MFRC522_ToCard>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <TM_MFRC522_Request+0x3c>
 8000b94:	89bb      	ldrh	r3, [r7, #12]
 8000b96:	2b10      	cmp	r3, #16
 8000b98:	d001      	beq.n	8000b9e <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2b0c      	cmp	r3, #12
 8000bca:	d006      	beq.n	8000bda <TM_MFRC522_ToCard+0x32>
 8000bcc:	2b0e      	cmp	r3, #14
 8000bce:	d109      	bne.n	8000be4 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	757b      	strb	r3, [r7, #21]
			break;
 8000bd8:	e005      	b.n	8000be6 <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8000bda:	2377      	movs	r3, #119	@ 0x77
 8000bdc:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8000bde:	2330      	movs	r3, #48	@ 0x30
 8000be0:	757b      	strb	r3, [r7, #21]
			break;
 8000be2:	e000      	b.n	8000be6 <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000be4:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8000be6:	7dbb      	ldrb	r3, [r7, #22]
 8000be8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f7ff fed1 	bl	8000998 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	2004      	movs	r0, #4
 8000bfa:	f7ff ff75 	bl	8000ae8 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000bfe:	2180      	movs	r1, #128	@ 0x80
 8000c00:	200a      	movs	r0, #10
 8000c02:	f7ff ff57 	bl	8000ab4 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8000c06:	2100      	movs	r1, #0
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fec5 	bl	8000998 <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8000c0e:	2300      	movs	r3, #0
 8000c10:	827b      	strh	r3, [r7, #18]
 8000c12:	e00a      	b.n	8000c2a <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8000c14:	8a7b      	ldrh	r3, [r7, #18]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	2009      	movs	r0, #9
 8000c20:	f7ff feba 	bl	8000998 <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8000c24:	8a7b      	ldrh	r3, [r7, #18]
 8000c26:	3301      	adds	r3, #1
 8000c28:	827b      	strh	r3, [r7, #18]
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	8a7a      	ldrh	r2, [r7, #18]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3ef      	bcc.n	8000c14 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	4619      	mov	r1, r3
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fead 	bl	8000998 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	2b0c      	cmp	r3, #12
 8000c42:	d103      	bne.n	8000c4c <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8000c44:	2180      	movs	r1, #128	@ 0x80
 8000c46:	200d      	movs	r0, #13
 8000c48:	f7ff ff34 	bl	8000ab4 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000c4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c50:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff fee4 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	753b      	strb	r3, [r7, #20]
		i--;
 8000c5c:	8a7b      	ldrh	r3, [r7, #18]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000c62:	8a7b      	ldrh	r3, [r7, #18]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00a      	beq.n	8000c7e <TM_MFRC522_ToCard+0xd6>
 8000c68:	7d3b      	ldrb	r3, [r7, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d105      	bne.n	8000c7e <TM_MFRC522_ToCard+0xd6>
 8000c72:	7d3a      	ldrb	r2, [r7, #20]
 8000c74:	7d7b      	ldrb	r3, [r7, #21]
 8000c76:	4013      	ands	r3, r2
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0e9      	beq.n	8000c52 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	200d      	movs	r0, #13
 8000c82:	f7ff ff31 	bl	8000ae8 <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8000c86:	8a7b      	ldrh	r3, [r7, #18]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d057      	beq.n	8000d3c <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8000c8c:	2006      	movs	r0, #6
 8000c8e:	f7ff fec7 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f003 031b 	and.w	r3, r3, #27
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14d      	bne.n	8000d38 <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8000ca0:	7d3a      	ldrb	r2, [r7, #20]
 8000ca2:	7dbb      	ldrb	r3, [r7, #22]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	2b0c      	cmp	r3, #12
 8000cb8:	d140      	bne.n	8000d3c <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8000cba:	200a      	movs	r0, #10
 8000cbc:	f7ff feb0 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8000cc4:	200c      	movs	r0, #12
 8000cc6:	f7ff feab 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8000cd2:	7c7b      	ldrb	r3, [r7, #17]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d00b      	beq.n	8000cf0 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8000cd8:	7d3b      	ldrb	r3, [r7, #20]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cec:	801a      	strh	r2, [r3, #0]
 8000cee:	e005      	b.n	8000cfc <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8000cf0:	7d3b      	ldrb	r3, [r7, #20]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfa:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8000cfc:	7d3b      	ldrb	r3, [r7, #20]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8000d02:	2301      	movs	r3, #1
 8000d04:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8000d06:	7d3b      	ldrb	r3, [r7, #20]
 8000d08:	2b10      	cmp	r3, #16
 8000d0a:	d901      	bls.n	8000d10 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8000d10:	2300      	movs	r3, #0
 8000d12:	827b      	strh	r3, [r7, #18]
 8000d14:	e00a      	b.n	8000d2c <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8000d16:	8a7b      	ldrh	r3, [r7, #18]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	18d4      	adds	r4, r2, r3
 8000d1c:	2009      	movs	r0, #9
 8000d1e:	f7ff fe7f 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000d22:	4603      	mov	r3, r0
 8000d24:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8000d26:	8a7b      	ldrh	r3, [r7, #18]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	827b      	strh	r3, [r7, #18]
 8000d2c:	7d3b      	ldrb	r3, [r7, #20]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	8a7a      	ldrh	r2, [r7, #18]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d3ef      	bcc.n	8000d16 <TM_MFRC522_ToCard+0x16e>
 8000d36:	e001      	b.n	8000d3c <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8000d38:	2302      	movs	r3, #2
 8000d3a:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}

08000d46 <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af02      	add	r7, sp, #8
 8000d4c:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000d52:	2100      	movs	r1, #0
 8000d54:	200d      	movs	r0, #13
 8000d56:	f7ff fe1f 	bl	8000998 <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2293      	movs	r2, #147	@ 0x93
 8000d5e:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	2220      	movs	r2, #32
 8000d66:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000d68:	f107 030a 	add.w	r3, r7, #10
 8000d6c:	9300      	str	r3, [sp, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2202      	movs	r2, #2
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	200c      	movs	r0, #12
 8000d76:	f7ff ff17 	bl	8000ba8 <TM_MFRC522_ToCard>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d118      	bne.n	8000db6 <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8000d84:	2300      	movs	r3, #0
 8000d86:	73bb      	strb	r3, [r7, #14]
 8000d88:	e009      	b.n	8000d9e <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	4413      	add	r3, r2
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	7b7b      	ldrb	r3, [r7, #13]
 8000d94:	4053      	eors	r3, r2
 8000d96:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	73bb      	strb	r3, [r7, #14]
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	d9f2      	bls.n	8000d8a <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	7b7a      	ldrb	r2, [r7, #13]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d001      	beq.n	8000db6 <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8000db2:	2302      	movs	r3, #2
 8000db4:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
} 
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8000dce:	2104      	movs	r1, #4
 8000dd0:	2005      	movs	r0, #5
 8000dd2:	f7ff fe89 	bl	8000ae8 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8000dd6:	2180      	movs	r1, #128	@ 0x80
 8000dd8:	200a      	movs	r0, #10
 8000dda:	f7ff fe6b 	bl	8000ab4 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8000dde:	2300      	movs	r3, #0
 8000de0:	75fb      	strb	r3, [r7, #23]
 8000de2:	e00a      	b.n	8000dfa <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	2009      	movs	r0, #9
 8000df0:	f7ff fdd2 	bl	8000998 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	3301      	adds	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
 8000dfa:	7dfa      	ldrb	r2, [r7, #23]
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3f0      	bcc.n	8000de4 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8000e02:	2103      	movs	r1, #3
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fdc7 	bl	8000998 <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8000e0a:	23ff      	movs	r3, #255	@ 0xff
 8000e0c:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8000e0e:	2005      	movs	r0, #5
 8000e10:	f7ff fe06 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000e14:	4603      	mov	r3, r0
 8000e16:	75bb      	strb	r3, [r7, #22]
		i--;
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <TM_MFRC522_CalculateCRC+0x6e>
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0ef      	beq.n	8000e0e <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8000e2e:	2022      	movs	r0, #34	@ 0x22
 8000e30:	f7ff fdf6 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1c5c      	adds	r4, r3, #1
 8000e40:	2021      	movs	r0, #33	@ 0x21
 8000e42:	f7ff fded 	bl	8000a20 <TM_MFRC522_ReadRegister>
 8000e46:	4603      	mov	r3, r0
 8000e48:	7023      	strb	r3, [r4, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}

08000e52 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8000e58:	2350      	movs	r3, #80	@ 0x50
 8000e5a:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8000e60:	463b      	mov	r3, r7
 8000e62:	1c9a      	adds	r2, r3, #2
 8000e64:	463b      	mov	r3, r7
 8000e66:	2102      	movs	r1, #2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ffa9 	bl	8000dc0 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000e6e:	463a      	mov	r2, r7
 8000e70:	4639      	mov	r1, r7
 8000e72:	1dbb      	adds	r3, r7, #6
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4613      	mov	r3, r2
 8000e78:	2204      	movs	r2, #4
 8000e7a:	200c      	movs	r0, #12
 8000e7c:	f7ff fe94 	bl	8000ba8 <TM_MFRC522_ToCard>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8c:	f7ff fd26 	bl	80008dc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f004 fb7f 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fb2f 	bl	800051c <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ec0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ecc:	080056cc 	.word	0x080056cc
  ldr r2, =_sbss
 8000ed0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ed4:	200049e0 	.word	0x200049e0

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f90d 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fc48 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	@ (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f917 	bl	8001172 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f8ed 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000008c 	.word	0x2000008c

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	@ (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f1c3 0307 	rsb	r3, r3, #7
 8001092:	2b04      	cmp	r3, #4
 8001094:	bf28      	it	cs
 8001096:	2304      	movcs	r3, #4
 8001098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3304      	adds	r3, #4
 800109e:	2b06      	cmp	r3, #6
 80010a0:	d902      	bls.n	80010a8 <NVIC_EncodePriority+0x30>
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3b03      	subs	r3, #3
 80010a6:	e000      	b.n	80010aa <NVIC_EncodePriority+0x32>
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43da      	mvns	r2, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	401a      	ands	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	@ 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff8e 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff47 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5c 	bl	8001008 <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff8e 	bl	8001078 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb0 	bl	80010e0 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e177      	b.n	8001498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8166 	bne.w	8001492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80c0 	beq.w	8001492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b66      	ldr	r3, [pc, #408]	@ (80014b0 <HAL_GPIO_Init+0x324>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a65      	ldr	r2, [pc, #404]	@ (80014b0 <HAL_GPIO_Init+0x324>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <HAL_GPIO_Init+0x324>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a61      	ldr	r2, [pc, #388]	@ (80014b4 <HAL_GPIO_Init+0x328>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a58      	ldr	r2, [pc, #352]	@ (80014b8 <HAL_GPIO_Init+0x32c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d037      	beq.n	80013ca <HAL_GPIO_Init+0x23e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a57      	ldr	r2, [pc, #348]	@ (80014bc <HAL_GPIO_Init+0x330>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d031      	beq.n	80013c6 <HAL_GPIO_Init+0x23a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a56      	ldr	r2, [pc, #344]	@ (80014c0 <HAL_GPIO_Init+0x334>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d02b      	beq.n	80013c2 <HAL_GPIO_Init+0x236>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a55      	ldr	r2, [pc, #340]	@ (80014c4 <HAL_GPIO_Init+0x338>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d025      	beq.n	80013be <HAL_GPIO_Init+0x232>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a54      	ldr	r2, [pc, #336]	@ (80014c8 <HAL_GPIO_Init+0x33c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01f      	beq.n	80013ba <HAL_GPIO_Init+0x22e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a53      	ldr	r2, [pc, #332]	@ (80014cc <HAL_GPIO_Init+0x340>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d019      	beq.n	80013b6 <HAL_GPIO_Init+0x22a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <HAL_GPIO_Init+0x344>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a51      	ldr	r2, [pc, #324]	@ (80014d4 <HAL_GPIO_Init+0x348>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d00d      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a50      	ldr	r2, [pc, #320]	@ (80014d8 <HAL_GPIO_Init+0x34c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d007      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4f      	ldr	r2, [pc, #316]	@ (80014dc <HAL_GPIO_Init+0x350>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d101      	bne.n	80013a6 <HAL_GPIO_Init+0x21a>
 80013a2:	2309      	movs	r3, #9
 80013a4:	e012      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013a6:	230a      	movs	r3, #10
 80013a8:	e010      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013aa:	2308      	movs	r3, #8
 80013ac:	e00e      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00c      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013b2:	2306      	movs	r3, #6
 80013b4:	e00a      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e008      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ba:	2304      	movs	r3, #4
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013be:	2303      	movs	r3, #3
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x240>
 80013ca:	2300      	movs	r3, #0
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	@ (80014b4 <HAL_GPIO_Init+0x328>)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a34      	ldr	r2, [pc, #208]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a29      	ldr	r2, [pc, #164]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143e:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001462:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <HAL_GPIO_Init+0x354>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	f67f ae84 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021800 	.word	0x40021800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40022000 	.word	0x40022000
 80014dc:	40022400 	.word	0x40022400
 80014e0:	40013c00 	.word	0x40013c00

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	603b      	str	r3, [r7, #0]
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a1f      	ldr	r2, [pc, #124]	@ (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800153e:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001540:	2201      	movs	r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001544:	f7ff fd30 	bl	8000fa8 <HAL_GetTick>
 8001548:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800154a:	e009      	b.n	8001560 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800154c:	f7ff fd2c 	bl	8000fa8 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800155a:	d901      	bls.n	8001560 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e01f      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156c:	d1ee      	bne.n	800154c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001574:	f7ff fd18 	bl	8000fa8 <HAL_GetTick>
 8001578:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800157a:	e009      	b.n	8001590 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800157c:	f7ff fd14 	bl	8000fa8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800158a:	d901      	bls.n	8001590 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e007      	b.n	80015a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001590:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800159c:	d1ee      	bne.n	800157c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	420e0040 	.word	0x420e0040
 80015b0:	40007000 	.word	0x40007000
 80015b4:	420e0044 	.word	0x420e0044

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e267      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d075      	beq.n	80016c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015d6:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d00c      	beq.n	80015fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e2:	4b85      	ldr	r3, [pc, #532]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d112      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4b82      	ldr	r3, [pc, #520]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015fa:	d10b      	bne.n	8001614 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	4b7e      	ldr	r3, [pc, #504]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d05b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x108>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d157      	bne.n	80016c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e242      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x74>
 800161e:	4b76      	ldr	r3, [pc, #472]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a75      	ldr	r2, [pc, #468]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0x98>
 8001636:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6f      	ldr	r2, [pc, #444]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6d      	ldr	r3, [pc, #436]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6c      	ldr	r2, [pc, #432]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xb0>
 8001650:	4b69      	ldr	r3, [pc, #420]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a68      	ldr	r2, [pc, #416]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b66      	ldr	r3, [pc, #408]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a65      	ldr	r2, [pc, #404]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fc9a 	bl	8000fa8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fc96 	bl	8000fa8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	@ 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e207      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5b      	ldr	r3, [pc, #364]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xc0>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fc86 	bl	8000fa8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fc82 	bl	8000fa8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	@ 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1f3      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b51      	ldr	r3, [pc, #324]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0xe8>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b41      	ldr	r3, [pc, #260]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1c7      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x244>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fc3b 	bl	8000fa8 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fc37 	bl	8000fa8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1a8      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b28      	ldr	r3, [pc, #160]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4925      	ldr	r1, [pc, #148]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <HAL_RCC_OscConfig+0x244>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fc1a 	bl	8000fa8 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fc16 	bl	8000fa8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e187      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1b      	ldr	r3, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d036      	beq.n	8001810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d016      	beq.n	80017d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_RCC_OscConfig+0x248>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fbfa 	bl	8000fa8 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fbf6 	bl	8000fa8 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e167      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_OscConfig+0x240>)
 80017cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x200>
 80017d6:	e01b      	b.n	8001810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_RCC_OscConfig+0x248>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fbe3 	bl	8000fa8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fbdf 	bl	8000fa8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d907      	bls.n	8001804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e150      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	42470000 	.word	0x42470000
 8001800:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b88      	ldr	r3, [pc, #544]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ea      	bne.n	80017e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 8097 	beq.w	800194c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b81      	ldr	r3, [pc, #516]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b7d      	ldr	r3, [pc, #500]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	4a7c      	ldr	r2, [pc, #496]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	@ 0x40
 800183e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b77      	ldr	r3, [pc, #476]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b74      	ldr	r3, [pc, #464]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a73      	ldr	r2, [pc, #460]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb9f 	bl	8000fa8 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fb9b 	bl	8000fa8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e10c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b6a      	ldr	r3, [pc, #424]	@ (8001a2c <HAL_RCC_OscConfig+0x474>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x2ea>
 8001894:	4b64      	ldr	r3, [pc, #400]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001898:	4a63      	ldr	r2, [pc, #396]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	6713      	str	r3, [r2, #112]	@ 0x70
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b05      	cmp	r3, #5
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x30c>
 80018aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x324>
 80018c4:	4b58      	ldr	r3, [pc, #352]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c8:	4a57      	ldr	r2, [pc, #348]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d0:	4b55      	ldr	r3, [pc, #340]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a54      	ldr	r2, [pc, #336]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff fb60 	bl	8000fa8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ec:	f7ff fb5c 	bl	8000fa8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0cb      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	4b49      	ldr	r3, [pc, #292]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0ee      	beq.n	80018ec <HAL_RCC_OscConfig+0x334>
 800190e:	e014      	b.n	800193a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff fb4a 	bl	8000fa8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001916:	e00a      	b.n	800192e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001918:	f7ff fb46 	bl	8000fa8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0b5      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1ee      	bne.n	8001918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d105      	bne.n	800194c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001940:	4b39      	ldr	r3, [pc, #228]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	4a38      	ldr	r2, [pc, #224]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800194a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80a1 	beq.w	8001a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001956:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b08      	cmp	r3, #8
 8001960:	d05c      	beq.n	8001a1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d141      	bne.n	80019ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb1a 	bl	8000fa8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fb16 	bl	8000fa8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e087      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198a:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69da      	ldr	r2, [r3, #28]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	3b01      	subs	r3, #1
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	061b      	lsls	r3, r3, #24
 80019ba:	491b      	ldr	r1, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff faef 	bl	8000fa8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff faeb 	bl	8000fa8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e05c      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x416>
 80019ec:	e054      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_RCC_OscConfig+0x478>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff fad8 	bl	8000fa8 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fad4 	bl	8000fa8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e045      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_RCC_OscConfig+0x470>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x444>
 8001a1a:	e03d      	b.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e038      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x4ec>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d028      	beq.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d121      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a64:	4013      	ands	r3, r2
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d111      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0cc      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b68      	ldr	r3, [pc, #416]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d90c      	bls.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b65      	ldr	r3, [pc, #404]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0b8      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a52      	ldr	r2, [pc, #328]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b20:	4b50      	ldr	r3, [pc, #320]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	494d      	ldr	r1, [pc, #308]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d044      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d119      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e07f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e06f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e067      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4934      	ldr	r1, [pc, #208]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff fa06 	bl	8000fa8 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff fa02 	bl	8000fa8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e04f      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d20c      	bcs.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e032      	b.n	8001c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	4916      	ldr	r1, [pc, #88]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1a:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	490e      	ldr	r1, [pc, #56]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2e:	f000 f821 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	490a      	ldr	r1, [pc, #40]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	5ccb      	ldrb	r3, [r1, r3]
 8001c42:	fa22 f303 	lsr.w	r3, r2, r3
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f966 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00
 8001c64:	40023800 	.word	0x40023800
 8001c68:	080056ac 	.word	0x080056ac
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c78:	b094      	sub	sp, #80	@ 0x50
 8001c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c8c:	4b79      	ldr	r3, [pc, #484]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 030c 	and.w	r3, r3, #12
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d00d      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f200 80e1 	bhi.w	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca6:	e0db      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca8:	4b73      	ldr	r3, [pc, #460]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cac:	e0db      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cae:	4b73      	ldr	r3, [pc, #460]	@ (8001e7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cb2:	e0d8      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d063      	beq.n	8001d92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	462b      	mov	r3, r5
 8001cea:	f04f 0000 	mov.w	r0, #0
 8001cee:	f04f 0100 	mov.w	r1, #0
 8001cf2:	0159      	lsls	r1, r3, #5
 8001cf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf8:	0150      	lsls	r0, r2, #5
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4621      	mov	r1, r4
 8001d00:	1a51      	subs	r1, r2, r1
 8001d02:	6139      	str	r1, [r7, #16]
 8001d04:	4629      	mov	r1, r5
 8001d06:	eb63 0301 	sbc.w	r3, r3, r1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d18:	4659      	mov	r1, fp
 8001d1a:	018b      	lsls	r3, r1, #6
 8001d1c:	4651      	mov	r1, sl
 8001d1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d22:	4651      	mov	r1, sl
 8001d24:	018a      	lsls	r2, r1, #6
 8001d26:	4651      	mov	r1, sl
 8001d28:	ebb2 0801 	subs.w	r8, r2, r1
 8001d2c:	4659      	mov	r1, fp
 8001d2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d46:	4690      	mov	r8, r2
 8001d48:	4699      	mov	r9, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	eb18 0303 	adds.w	r3, r8, r3
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	462b      	mov	r3, r5
 8001d54:	eb49 0303 	adc.w	r3, r9, r3
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d66:	4629      	mov	r1, r5
 8001d68:	024b      	lsls	r3, r1, #9
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d70:	4621      	mov	r1, r4
 8001d72:	024a      	lsls	r2, r1, #9
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d84:	f7fe fa34 	bl	80001f0 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d90:	e058      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d92:	4b38      	ldr	r3, [pc, #224]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	099b      	lsrs	r3, r3, #6
 8001d98:	2200      	movs	r2, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001da2:	623b      	str	r3, [r7, #32]
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001dac:	4642      	mov	r2, r8
 8001dae:	464b      	mov	r3, r9
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	0159      	lsls	r1, r3, #5
 8001dba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dbe:	0150      	lsls	r0, r2, #5
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4641      	mov	r1, r8
 8001dc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ddc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001de0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de4:	ebb2 040a 	subs.w	r4, r2, sl
 8001de8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	00eb      	lsls	r3, r5, #3
 8001df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dfa:	00e2      	lsls	r2, r4, #3
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	4643      	mov	r3, r8
 8001e02:	18e3      	adds	r3, r4, r3
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	464b      	mov	r3, r9
 8001e08:	eb45 0303 	adc.w	r3, r5, r3
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	028b      	lsls	r3, r1, #10
 8001e1e:	4621      	mov	r1, r4
 8001e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e24:	4621      	mov	r1, r4
 8001e26:	028a      	lsls	r2, r1, #10
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	61fa      	str	r2, [r7, #28]
 8001e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e38:	f7fe f9da 	bl	80001f0 <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4613      	mov	r3, r2
 8001e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	0c1b      	lsrs	r3, r3, #16
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e60:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3750      	adds	r7, #80	@ 0x50
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e07b      	b.n	8001f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d108      	bne.n	8001eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ea2:	d009      	beq.n	8001eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61da      	str	r2, [r3, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fc92 	bl	80007fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3c:	ea42 0103 	orr.w	r1, r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0104 	and.w	r1, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	f003 0210 	and.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	430a      	orrs	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b088      	sub	sp, #32
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa2:	f7ff f801 	bl	8000fa8 <HAL_GetTick>
 8001fa6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e12a      	b.n	8002212 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_Transmit+0x36>
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e122      	b.n	8002212 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_SPI_Transmit+0x48>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e11b      	b.n	8002212 <HAL_SPI_Transmit+0x280>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	88fa      	ldrh	r2, [r7, #6]
 8002000:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002028:	d10f      	bne.n	800204a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002038:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002048:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002054:	2b40      	cmp	r3, #64	@ 0x40
 8002056:	d007      	beq.n	8002068 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002070:	d152      	bne.n	8002118 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_SPI_Transmit+0xee>
 800207a:	8b7b      	ldrh	r3, [r7, #26]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d145      	bne.n	800210c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	1c9a      	adds	r2, r3, #2
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020a4:	e032      	b.n	800210c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d112      	bne.n	80020da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	881a      	ldrh	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	1c9a      	adds	r2, r3, #2
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020d8:	e018      	b.n	800210c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020da:	f7fe ff65 	bl	8000fa8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d803      	bhi.n	80020f2 <HAL_SPI_Transmit+0x160>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d102      	bne.n	80020f8 <HAL_SPI_Transmit+0x166>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d109      	bne.n	800210c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e082      	b.n	8002212 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1c7      	bne.n	80020a6 <HAL_SPI_Transmit+0x114>
 8002116:	e053      	b.n	80021c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Transmit+0x194>
 8002120:	8b7b      	ldrh	r3, [r7, #26]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d147      	bne.n	80021b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	330c      	adds	r3, #12
 8002130:	7812      	ldrb	r2, [r2, #0]
 8002132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800214c:	e033      	b.n	80021b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	d113      	bne.n	8002184 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002182:	e018      	b.n	80021b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002184:	f7fe ff10 	bl	8000fa8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d803      	bhi.n	800219c <HAL_SPI_Transmit+0x20a>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d102      	bne.n	80021a2 <HAL_SPI_Transmit+0x210>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e02d      	b.n	8002212 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1c6      	bne.n	800214e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fbe7 	bl	8002998 <SPI_EndRxTxTransaction>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002210:	2300      	movs	r3, #0
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b088      	sub	sp, #32
 800221e:	af02      	add	r7, sp, #8
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002236:	2302      	movs	r3, #2
 8002238:	e104      	b.n	8002444 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_SPI_Receive+0x2c>
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0fc      	b.n	8002444 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002252:	d112      	bne.n	800227a <HAL_SPI_Receive+0x60>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10e      	bne.n	800227a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2204      	movs	r2, #4
 8002260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	4613      	mov	r3, r2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 f8eb 	bl	800244c <HAL_SPI_TransmitReceive>
 8002276:	4603      	mov	r3, r0
 8002278:	e0e4      	b.n	8002444 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800227a:	f7fe fe95 	bl	8000fa8 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_SPI_Receive+0x74>
 800228a:	2302      	movs	r3, #2
 800228c:	e0da      	b.n	8002444 <HAL_SPI_Receive+0x22a>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2204      	movs	r2, #4
 800229a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022dc:	d10f      	bne.n	80022fe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002308:	2b40      	cmp	r3, #64	@ 0x40
 800230a:	d007      	beq.n	800231c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800231a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d170      	bne.n	8002406 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002324:	e035      	b.n	8002392 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d115      	bne.n	8002360 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f103 020c 	add.w	r2, r3, #12
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	7812      	ldrb	r2, [r2, #0]
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800235e:	e018      	b.n	8002392 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002360:	f7fe fe22 	bl	8000fa8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d803      	bhi.n	8002378 <HAL_SPI_Receive+0x15e>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002376:	d102      	bne.n	800237e <HAL_SPI_Receive+0x164>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e058      	b.n	8002444 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1c4      	bne.n	8002326 <HAL_SPI_Receive+0x10c>
 800239c:	e038      	b.n	8002410 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d113      	bne.n	80023d4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	b292      	uxth	r2, r2
 80023b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023be:	1c9a      	adds	r2, r3, #2
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80023d2:	e018      	b.n	8002406 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d4:	f7fe fde8 	bl	8000fa8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d803      	bhi.n	80023ec <HAL_SPI_Receive+0x1d2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d102      	bne.n	80023f2 <HAL_SPI_Receive+0x1d8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e01e      	b.n	8002444 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1c6      	bne.n	800239e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	6839      	ldr	r1, [r7, #0]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 fa59 	bl	80028cc <SPI_EndRxTransaction>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002442:	2300      	movs	r3, #0
  }
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800245a:	2301      	movs	r3, #1
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800245e:	f7fe fda3 	bl	8000fa8 <HAL_GetTick>
 8002462:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800246a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002472:	887b      	ldrh	r3, [r7, #2]
 8002474:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002476:	7ffb      	ldrb	r3, [r7, #31]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d00c      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x4a>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002482:	d106      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x46>
 800248c:	7ffb      	ldrb	r3, [r7, #31]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d001      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	e17f      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x5c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_SPI_TransmitReceive+0x5c>
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e174      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_SPI_TransmitReceive+0x6e>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e16d      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d003      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2205      	movs	r2, #5
 80024d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002516:	2b40      	cmp	r3, #64	@ 0x40
 8002518:	d007      	beq.n	800252a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002532:	d17e      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <HAL_SPI_TransmitReceive+0xf6>
 800253c:	8afb      	ldrh	r3, [r7, #22]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d16c      	bne.n	800261c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002566:	e059      	b.n	800261c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	d11b      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x162>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x162>
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	2b01      	cmp	r3, #1
 8002584:	d113      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	881a      	ldrh	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	1c9a      	adds	r2, r3, #2
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d119      	bne.n	80025f0 <HAL_SPI_TransmitReceive+0x1a4>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d014      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d0:	b292      	uxth	r2, r2
 80025d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d8:	1c9a      	adds	r2, r3, #2
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025f0:	f7fe fcda 	bl	8000fa8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d80d      	bhi.n	800261c <HAL_SPI_TransmitReceive+0x1d0>
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d009      	beq.n	800261c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0bc      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1a0      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x11c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d19b      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x11c>
 8002630:	e082      	b.n	8002738 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_TransmitReceive+0x1f4>
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d171      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002666:	e05d      	b.n	8002724 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d11c      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x264>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_SPI_TransmitReceive+0x264>
 8002680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002682:	2b01      	cmp	r3, #1
 8002684:	d114      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	7812      	ldrb	r2, [r2, #0]
 8002692:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d119      	bne.n	80026f2 <HAL_SPI_TransmitReceive+0x2a6>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d014      	beq.n	80026f2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026f2:	f7fe fc59 	bl	8000fa8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026fe:	429a      	cmp	r2, r3
 8002700:	d803      	bhi.n	800270a <HAL_SPI_TransmitReceive+0x2be>
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002708:	d102      	bne.n	8002710 <HAL_SPI_TransmitReceive+0x2c4>
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e038      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d19c      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x21c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d197      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f92b 	bl	8002998 <SPI_EndRxTxTransaction>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e01d      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10a      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002794:	2300      	movs	r3, #0
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3728      	adds	r7, #40	@ 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ac:	b2db      	uxtb	r3, r3
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027cc:	f7fe fbec 	bl	8000fa8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027dc:	f7fe fbe4 	bl	8000fa8 <HAL_GetTick>
 80027e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	015b      	lsls	r3, r3, #5
 80027e8:	0d1b      	lsrs	r3, r3, #20
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	fb02 f303 	mul.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027f2:	e055      	b.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d051      	beq.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027fc:	f7fe fbd4 	bl	8000fa8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	429a      	cmp	r2, r3
 800280a:	d902      	bls.n	8002812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d13d      	bne.n	800288e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282a:	d111      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002834:	d004      	beq.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283e:	d107      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800284e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002858:	d10f      	bne.n	800287a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e018      	b.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	e002      	b.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3b01      	subs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	4013      	ands	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d19a      	bne.n	80027f4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000000 	.word	0x20000000

080028cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028e0:	d111      	bne.n	8002906 <SPI_EndRxTransaction+0x3a>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ea:	d004      	beq.n	80028f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f4:	d107      	bne.n	8002906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290e:	d12a      	bne.n	8002966 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002918:	d012      	beq.n	8002940 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	@ 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff ff49 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02d      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e026      	b.n	800298e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	2101      	movs	r1, #1
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff ff36 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d01a      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e013      	b.n	800298e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	2101      	movs	r1, #1
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f7ff ff23 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e000      	b.n	800298e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2201      	movs	r2, #1
 80029ac:	2102      	movs	r1, #2
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff ff04 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e032      	b.n	8002a30 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <SPI_EndRxTxTransaction+0xa0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	@ (8002a3c <SPI_EndRxTxTransaction+0xa4>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e8:	d112      	bne.n	8002a10 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	@ 0x80
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff fee1 	bl	80027bc <SPI_WaitFlagStateUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d016      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e00f      	b.n	8002a30 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a26:	2b80      	cmp	r3, #128	@ 0x80
 8002a28:	d0f2      	beq.n	8002a10 <SPI_EndRxTxTransaction+0x78>
 8002a2a:	e000      	b.n	8002a2e <SPI_EndRxTxTransaction+0x96>
        break;
 8002a2c:	bf00      	nop
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	165e9f81 	.word	0x165e9f81

08002a40 <__NVIC_SetPriority>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	@ (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	@ (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f06f 0004 	mvn.w	r0, #4
 8002a9e:	f7ff ffcf 	bl	8002a40 <__NVIC_SetPriority>
#endif
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aae:	f3ef 8305 	mrs	r3, IPSR
 8002ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ab4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aba:	f06f 0305 	mvn.w	r3, #5
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	e00c      	b.n	8002adc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <osKernelInitialize+0x44>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <osKernelInitialize+0x44>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	e002      	b.n	8002adc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000090 	.word	0x20000090

08002af0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af6:	f3ef 8305 	mrs	r3, IPSR
 8002afa:	603b      	str	r3, [r7, #0]
  return(result);
 8002afc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b02:	f06f 0305 	mvn.w	r3, #5
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	e010      	b.n	8002b2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <osKernelStart+0x48>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d109      	bne.n	8002b26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b12:	f7ff ffbf 	bl	8002a94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <osKernelStart+0x48>)
 8002b18:	2202      	movs	r2, #2
 8002b1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b1c:	f001 f87a 	bl	8003c14 <vTaskStartScheduler>
      stat = osOK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	e002      	b.n	8002b2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b2c:	687b      	ldr	r3, [r7, #4]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000090 	.word	0x20000090

08002b3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08e      	sub	sp, #56	@ 0x38
 8002b40:	af04      	add	r7, sp, #16
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b4c:	f3ef 8305 	mrs	r3, IPSR
 8002b50:	617b      	str	r3, [r7, #20]
  return(result);
 8002b52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d17e      	bne.n	8002c56 <osThreadNew+0x11a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d07b      	beq.n	8002c56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b62:	2318      	movs	r3, #24
 8002b64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d045      	beq.n	8002c02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <osThreadNew+0x48>
        name = attr->name;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <osThreadNew+0x6e>
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2b38      	cmp	r3, #56	@ 0x38
 8002b9c:	d805      	bhi.n	8002baa <osThreadNew+0x6e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <osThreadNew+0x72>
        return (NULL);
 8002baa:	2300      	movs	r3, #0
 8002bac:	e054      	b.n	8002c58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00e      	beq.n	8002be4 <osThreadNew+0xa8>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b5b      	cmp	r3, #91	@ 0x5b
 8002bcc:	d90a      	bls.n	8002be4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <osThreadNew+0xa8>
        mem = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	e010      	b.n	8002c06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <osThreadNew+0xca>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <osThreadNew+0xca>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <osThreadNew+0xca>
          mem = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e001      	b.n	8002c06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d110      	bne.n	8002c2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c14:	9202      	str	r2, [sp, #8]
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6a3a      	ldr	r2, [r7, #32]
 8002c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fe1a 	bl	800385c <xTaskCreateStatic>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e013      	b.n	8002c56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d110      	bne.n	8002c56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fe68 	bl	800391c <xTaskCreate>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d001      	beq.n	8002c56 <osThreadNew+0x11a>
            hTask = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c56:	693b      	ldr	r3, [r7, #16]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3728      	adds	r7, #40	@ 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c68:	f3ef 8305 	mrs	r3, IPSR
 8002c6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <osDelay+0x1c>
    stat = osErrorISR;
 8002c74:	f06f 0305 	mvn.w	r3, #5
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e007      	b.n	8002c8c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 ff8e 	bl	8003ba8 <vTaskDelay>
    }
  }

  return (stat);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4a06      	ldr	r2, [pc, #24]	@ (8002cc8 <vApplicationGetIdleTaskMemory+0x30>)
 8002cae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000094 	.word	0x20000094
 8002cc8:	200000f0 	.word	0x200000f0

08002ccc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4a06      	ldr	r2, [pc, #24]	@ (8002cfc <vApplicationGetTimerTaskMemory+0x30>)
 8002ce2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	200002f0 	.word	0x200002f0
 8002cfc:	2000034c 	.word	0x2000034c

08002d00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f103 0208 	add.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f103 0208 	add.w	r2, r3, #8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f103 0208 	add.w	r2, r3, #8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	601a      	str	r2, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002da2:	b480      	push	{r7}
 8002da4:	b085      	sub	sp, #20
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d103      	bne.n	8002dc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	e00c      	b.n	8002ddc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e002      	b.n	8002dd0 <vListInsert+0x2e>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d2f6      	bcs.n	8002dca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6892      	ldr	r2, [r2, #8]
 8002e2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6852      	ldr	r2, [r2, #4]
 8002e34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d103      	bne.n	8002e48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e94:	f002 f878 	bl	8004f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	441a      	add	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	68f9      	ldr	r1, [r7, #12]
 8002ec8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	441a      	add	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	@ 0xff
 8002ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	22ff      	movs	r2, #255	@ 0xff
 8002ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d114      	bne.n	8002f14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01a      	beq.n	8002f28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f91a 	bl	8004130 <xTaskRemoveFromEventList>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <xQueueGenericReset+0xd0>)
 8002f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	e009      	b.n	8002f28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3310      	adds	r3, #16
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fef1 	bl	8002d00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3324      	adds	r3, #36	@ 0x24
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff feec 	bl	8002d00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f28:	f002 f860 	bl	8004fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000ed04 	.word	0xe000ed04

08002f3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08e      	sub	sp, #56	@ 0x38
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10b      	bne.n	8002f86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	e7fd      	b.n	8002f82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <xQueueGenericCreateStatic+0x56>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <xQueueGenericCreateStatic+0x5a>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueGenericCreateStatic+0x5c>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10b      	bne.n	8002fb4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	623b      	str	r3, [r7, #32]
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <xQueueGenericCreateStatic+0x84>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <xQueueGenericCreateStatic+0x88>
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e000      	b.n	8002fc6 <xQueueGenericCreateStatic+0x8a>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	61fb      	str	r3, [r7, #28]
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	e7fd      	b.n	8002fde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fe2:	2350      	movs	r3, #80	@ 0x50
 8002fe4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b50      	cmp	r3, #80	@ 0x50
 8002fea:	d00b      	beq.n	8003004 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	61bb      	str	r3, [r7, #24]
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003004:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800300a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003018:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800301c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f805 	bl	8003036 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800302e:	4618      	mov	r0, r3
 8003030:	3730      	adds	r7, #48	@ 0x30
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e002      	b.n	8003058 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003064:	2101      	movs	r1, #1
 8003066:	69b8      	ldr	r0, [r7, #24]
 8003068:	f7ff fefe 	bl	8002e68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	@ 0x38
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800308a:	2300      	movs	r3, #0
 800308c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <xQueueGenericSend+0x34>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d103      	bne.n	80030be <xQueueGenericSend+0x42>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <xQueueGenericSend+0x46>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <xQueueGenericSend+0x48>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <xQueueGenericSend+0x64>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d103      	bne.n	80030ee <xQueueGenericSend+0x72>
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <xQueueGenericSend+0x76>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <xQueueGenericSend+0x78>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10b      	bne.n	8003110 <xQueueGenericSend+0x94>
	__asm volatile
 80030f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fc:	f383 8811 	msr	BASEPRI, r3
 8003100:	f3bf 8f6f 	isb	sy
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	623b      	str	r3, [r7, #32]
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003110:	f001 f9ce 	bl	80044b0 <xTaskGetSchedulerState>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <xQueueGenericSend+0xa4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <xQueueGenericSend+0xa8>
 8003120:	2301      	movs	r3, #1
 8003122:	e000      	b.n	8003126 <xQueueGenericSend+0xaa>
 8003124:	2300      	movs	r3, #0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <xQueueGenericSend+0xc6>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	61fb      	str	r3, [r7, #28]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003142:	f001 ff21 	bl	8004f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <xQueueGenericSend+0xdc>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d129      	bne.n	80031ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800315e:	f000 fa0f 	bl	8003580 <prvCopyDataToQueue>
 8003162:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	3324      	adds	r3, #36	@ 0x24
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ffdd 	bl	8004130 <xTaskRemoveFromEventList>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800317c:	4b3f      	ldr	r3, [pc, #252]	@ (800327c <xQueueGenericSend+0x200>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	e00a      	b.n	80031a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800318e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <xQueueGenericSend+0x200>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031a4:	f001 ff22 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e063      	b.n	8003274 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031b2:	f001 ff1b 	bl	8004fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e05c      	b.n	8003274 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 f817 	bl	80041f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ca:	2301      	movs	r3, #1
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ce:	f001 ff0d 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031d2:	f000 fd87 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d6:	f001 fed7 	bl	8004f88 <vPortEnterCritical>
 80031da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d103      	bne.n	80031f0 <xQueueGenericSend+0x174>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f6:	b25b      	sxtb	r3, r3
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d103      	bne.n	8003206 <xQueueGenericSend+0x18a>
 80031fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003206:	f001 fef1 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800320a:	1d3a      	adds	r2, r7, #4
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f001 f806 	bl	8004224 <xTaskCheckForTimeOut>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d124      	bne.n	8003268 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800321e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003220:	f000 faa6 	bl	8003770 <prvIsQueueFull>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d018      	beq.n	800325c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	3310      	adds	r3, #16
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4611      	mov	r1, r2
 8003232:	4618      	mov	r0, r3
 8003234:	f000 ff2a 	bl	800408c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800323a:	f000 fa31 	bl	80036a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800323e:	f000 fd5f 	bl	8003d00 <xTaskResumeAll>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	f47f af7c 	bne.w	8003142 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800324a:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <xQueueGenericSend+0x200>)
 800324c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	e772      	b.n	8003142 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800325c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800325e:	f000 fa1f 	bl	80036a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003262:	f000 fd4d 	bl	8003d00 <xTaskResumeAll>
 8003266:	e76c      	b.n	8003142 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800326a:	f000 fa19 	bl	80036a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800326e:	f000 fd47 	bl	8003d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003274:	4618      	mov	r0, r3
 8003276:	3738      	adds	r7, #56	@ 0x38
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	e000ed04 	.word	0xe000ed04

08003280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b090      	sub	sp, #64	@ 0x40
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032aa:	bf00      	nop
 80032ac:	bf00      	nop
 80032ae:	e7fd      	b.n	80032ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <xQueueGenericSendFromISR+0x3e>
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <xQueueGenericSendFromISR+0x42>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueGenericSendFromISR+0x44>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10b      	bne.n	80032e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	e7fd      	b.n	80032dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d103      	bne.n	80032ee <xQueueGenericSendFromISR+0x6e>
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <xQueueGenericSendFromISR+0x72>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <xQueueGenericSendFromISR+0x74>
 80032f2:	2300      	movs	r3, #0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10b      	bne.n	8003310 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	623b      	str	r3, [r7, #32]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003310:	f001 ff1a 	bl	8005148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003314:	f3ef 8211 	mrs	r2, BASEPRI
 8003318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	61fa      	str	r2, [r7, #28]
 800332a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800332c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <xQueueGenericSendFromISR+0xc2>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d12f      	bne.n	80033a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003348:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800334c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003358:	f000 f912 	bl	8003580 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800335c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d112      	bne.n	800338c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	3324      	adds	r3, #36	@ 0x24
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fedc 	bl	8004130 <xTaskRemoveFromEventList>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00e      	beq.n	800339c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e007      	b.n	800339c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800338c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003390:	3301      	adds	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	b25a      	sxtb	r2, r3
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800339c:	2301      	movs	r3, #1
 800339e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80033a0:	e001      	b.n	80033a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3740      	adds	r7, #64	@ 0x40
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	@ 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <xQueueReceive+0x32>
	__asm volatile
 80033d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033da:	f383 8811 	msr	BASEPRI, r3
 80033de:	f3bf 8f6f 	isb	sy
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	623b      	str	r3, [r7, #32]
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	e7fd      	b.n	80033ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <xQueueReceive+0x40>
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <xQueueReceive+0x44>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <xQueueReceive+0x46>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <xQueueReceive+0x62>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	61fb      	str	r3, [r7, #28]
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800341e:	f001 f847 	bl	80044b0 <xTaskGetSchedulerState>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d102      	bne.n	800342e <xQueueReceive+0x72>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <xQueueReceive+0x76>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueReceive+0x78>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <xQueueReceive+0x94>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	61bb      	str	r3, [r7, #24]
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003450:	f001 fd9a 	bl	8004f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01f      	beq.n	80034a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003464:	f000 f8f6 	bl	8003654 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	1e5a      	subs	r2, r3, #1
 800346c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00f      	beq.n	8003498 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	3310      	adds	r3, #16
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fe57 	bl	8004130 <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003488:	4b3c      	ldr	r3, [pc, #240]	@ (800357c <xQueueReceive+0x1c0>)
 800348a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003498:	f001 fda8 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 800349c:	2301      	movs	r3, #1
 800349e:	e069      	b.n	8003574 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034a6:	f001 fda1 	bl	8004fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e062      	b.n	8003574 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034b4:	f107 0310 	add.w	r3, r7, #16
 80034b8:	4618      	mov	r0, r3
 80034ba:	f000 fe9d 	bl	80041f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034c2:	f001 fd93 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034c6:	f000 fc0d 	bl	8003ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034ca:	f001 fd5d 	bl	8004f88 <vPortEnterCritical>
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034d4:	b25b      	sxtb	r3, r3
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d103      	bne.n	80034e4 <xQueueReceive+0x128>
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d103      	bne.n	80034fa <xQueueReceive+0x13e>
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034fa:	f001 fd77 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034fe:	1d3a      	adds	r2, r7, #4
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fe8c 	bl	8004224 <xTaskCheckForTimeOut>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d123      	bne.n	800355a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003514:	f000 f916 	bl	8003744 <prvIsQueueEmpty>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d017      	beq.n	800354e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	3324      	adds	r3, #36	@ 0x24
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fdb0 	bl	800408c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800352c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800352e:	f000 f8b7 	bl	80036a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003532:	f000 fbe5 	bl	8003d00 <xTaskResumeAll>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d189      	bne.n	8003450 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800353c:	4b0f      	ldr	r3, [pc, #60]	@ (800357c <xQueueReceive+0x1c0>)
 800353e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	e780      	b.n	8003450 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800354e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003550:	f000 f8a6 	bl	80036a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003554:	f000 fbd4 	bl	8003d00 <xTaskResumeAll>
 8003558:	e77a      	b.n	8003450 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800355a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800355c:	f000 f8a0 	bl	80036a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003560:	f000 fbce 	bl	8003d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003566:	f000 f8ed 	bl	8003744 <prvIsQueueEmpty>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	f43f af6f 	beq.w	8003450 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003572:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003574:	4618      	mov	r0, r3
 8003576:	3730      	adds	r7, #48	@ 0x30
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d14d      	bne.n	8003642 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ff9e 	bl	80044ec <xTaskPriorityDisinherit>
 80035b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e043      	b.n	8003642 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d119      	bne.n	80035f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6858      	ldr	r0, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	461a      	mov	r2, r3
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	f002 f818 	bl	8005600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d32b      	bcc.n	8003642 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e026      	b.n	8003642 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	68d8      	ldr	r0, [r3, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	461a      	mov	r2, r3
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	f001 fffe 	bl	8005600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	425b      	negs	r3, r3
 800360e:	441a      	add	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	425b      	negs	r3, r3
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d105      	bne.n	8003642 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3b01      	subs	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800364a:	697b      	ldr	r3, [r7, #20]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d018      	beq.n	8003698 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	441a      	add	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	429a      	cmp	r2, r3
 800367e:	d303      	bcc.n	8003688 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68d9      	ldr	r1, [r3, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	461a      	mov	r2, r3
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	f001 ffb4 	bl	8005600 <memcpy>
	}
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036a8:	f001 fc6e 	bl	8004f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036b4:	e011      	b.n	80036da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3324      	adds	r3, #36	@ 0x24
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fd34 	bl	8004130 <xTaskRemoveFromEventList>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036ce:	f000 fe0d 	bl	80042ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	dce9      	bgt.n	80036b6 <prvUnlockQueue+0x16>
 80036e2:	e000      	b.n	80036e6 <prvUnlockQueue+0x46>
					break;
 80036e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	22ff      	movs	r2, #255	@ 0xff
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80036ee:	f001 fc7d 	bl	8004fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036f2:	f001 fc49 	bl	8004f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036fe:	e011      	b.n	8003724 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d012      	beq.n	800372e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3310      	adds	r3, #16
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fd0f 	bl	8004130 <xTaskRemoveFromEventList>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003718:	f000 fde8 	bl	80042ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	3b01      	subs	r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003728:	2b00      	cmp	r3, #0
 800372a:	dce9      	bgt.n	8003700 <prvUnlockQueue+0x60>
 800372c:	e000      	b.n	8003730 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800372e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	22ff      	movs	r2, #255	@ 0xff
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003738:	f001 fc58 	bl	8004fec <vPortExitCritical>
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800374c:	f001 fc1c 	bl	8004f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e001      	b.n	8003762 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003762:	f001 fc43 	bl	8004fec <vPortExitCritical>

	return xReturn;
 8003766:	68fb      	ldr	r3, [r7, #12]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003778:	f001 fc06 	bl	8004f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	429a      	cmp	r2, r3
 8003786:	d102      	bne.n	800378e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e001      	b.n	8003792 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003792:	f001 fc2b 	bl	8004fec <vPortExitCritical>

	return xReturn;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e014      	b.n	80037da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037b0:	4a0f      	ldr	r2, [pc, #60]	@ (80037f0 <vQueueAddToRegistry+0x50>)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10b      	bne.n	80037d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037bc:	490c      	ldr	r1, [pc, #48]	@ (80037f0 <vQueueAddToRegistry+0x50>)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <vQueueAddToRegistry+0x50>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037d2:	e006      	b.n	80037e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2b07      	cmp	r3, #7
 80037de:	d9e7      	bls.n	80037b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	2000074c 	.word	0x2000074c

080037f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003804:	f001 fbc0 	bl	8004f88 <vPortEnterCritical>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800380e:	b25b      	sxtb	r3, r3
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d103      	bne.n	800381e <vQueueWaitForMessageRestricted+0x2a>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003824:	b25b      	sxtb	r3, r3
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d103      	bne.n	8003834 <vQueueWaitForMessageRestricted+0x40>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003834:	f001 fbda 	bl	8004fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3324      	adds	r3, #36	@ 0x24
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fc45 	bl	80040d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff26 	bl	80036a0 <prvUnlockQueue>
	}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08e      	sub	sp, #56	@ 0x38
 8003860:	af04      	add	r7, sp, #16
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800386a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	623b      	str	r3, [r7, #32]
}
 8003882:	bf00      	nop
 8003884:	bf00      	nop
 8003886:	e7fd      	b.n	8003884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	61fb      	str	r3, [r7, #28]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038a6:	235c      	movs	r3, #92	@ 0x5c
 80038a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80038ae:	d00b      	beq.n	80038c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	61bb      	str	r3, [r7, #24]
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01e      	beq.n	800390e <xTaskCreateStatic+0xb2>
 80038d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01b      	beq.n	800390e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038e8:	2300      	movs	r3, #0
 80038ea:	9303      	str	r3, [sp, #12]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68b9      	ldr	r1, [r7, #8]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f850 	bl	80039a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003908:	f000 f8de 	bl	8003ac8 <prvAddNewTaskToReadyList>
 800390c:	e001      	b.n	8003912 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003912:	697b      	ldr	r3, [r7, #20]
	}
 8003914:	4618      	mov	r0, r3
 8003916:	3728      	adds	r7, #40	@ 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	@ 0x30
 8003920:	af04      	add	r7, sp, #16
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fc4b 	bl	80051cc <pvPortMalloc>
 8003936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00e      	beq.n	800395c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800393e:	205c      	movs	r0, #92	@ 0x5c
 8003940:	f001 fc44 	bl	80051cc <pvPortMalloc>
 8003944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30
 8003952:	e005      	b.n	8003960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003954:	6978      	ldr	r0, [r7, #20]
 8003956:	f001 fd07 	bl	8005368 <vPortFree>
 800395a:	e001      	b.n	8003960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d017      	beq.n	8003996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	2300      	movs	r3, #0
 8003972:	9303      	str	r3, [sp, #12]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	9302      	str	r3, [sp, #8]
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f80e 	bl	80039a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800398a:	69f8      	ldr	r0, [r7, #28]
 800398c:	f000 f89c 	bl	8003ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003990:	2301      	movs	r3, #1
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e002      	b.n	800399c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800399c:	69bb      	ldr	r3, [r7, #24]
	}
 800399e:	4618      	mov	r0, r3
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b088      	sub	sp, #32
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	461a      	mov	r2, r3
 80039be:	21a5      	movs	r1, #165	@ 0xa5
 80039c0:	f001 fdf2 	bl	80055a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039ce:	3b01      	subs	r3, #1
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f023 0307 	bic.w	r3, r3, #7
 80039dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	617b      	str	r3, [r7, #20]
}
 80039fa:	bf00      	nop
 80039fc:	bf00      	nop
 80039fe:	e7fd      	b.n	80039fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01f      	beq.n	8003a46 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e012      	b.n	8003a32 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	7819      	ldrb	r1, [r3, #0]
 8003a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	3334      	adds	r3, #52	@ 0x34
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d006      	beq.n	8003a3a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b0f      	cmp	r3, #15
 8003a36:	d9e9      	bls.n	8003a0c <prvInitialiseNewTask+0x66>
 8003a38:	e000      	b.n	8003a3c <prvInitialiseNewTask+0x96>
			{
				break;
 8003a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a44:	e003      	b.n	8003a4e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a50:	2b37      	cmp	r3, #55	@ 0x37
 8003a52:	d901      	bls.n	8003a58 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a54:	2337      	movs	r3, #55	@ 0x37
 8003a56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a62:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	2200      	movs	r2, #0
 8003a68:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f966 	bl	8002d40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	3318      	adds	r3, #24
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff f961 	bl	8002d40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	69b8      	ldr	r0, [r7, #24]
 8003aa8:	f001 f93e 	bl	8004d28 <pxPortInitialiseStack>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003abe:	bf00      	nop
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad0:	f001 fa5a 	bl	8004f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <prvAddNewTaskToReadyList+0xc4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <prvAddNewTaskToReadyList+0xc4>)
 8003adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ade:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aec:	4b27      	ldr	r3, [pc, #156]	@ (8003b8c <prvAddNewTaskToReadyList+0xc4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d110      	bne.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003af4:	f000 fc1e 	bl	8004334 <prvInitialiseTaskLists>
 8003af8:	e00d      	b.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003afa:	4b26      	ldr	r3, [pc, #152]	@ (8003b94 <prvAddNewTaskToReadyList+0xcc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b02:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d802      	bhi.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b10:	4a1f      	ldr	r2, [pc, #124]	@ (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <prvAddNewTaskToReadyList+0xd0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <prvAddNewTaskToReadyList+0xd0>)
 8003b1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003b20:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <prvAddNewTaskToReadyList+0xd0>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <prvAddNewTaskToReadyList+0xd4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d903      	bls.n	8003b3c <prvAddNewTaskToReadyList+0x74>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	4a18      	ldr	r2, [pc, #96]	@ (8003b9c <prvAddNewTaskToReadyList+0xd4>)
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <prvAddNewTaskToReadyList+0xd8>)
 8003b4a:	441a      	add	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f7ff f901 	bl	8002d5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b58:	f001 fa48 	bl	8004fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <prvAddNewTaskToReadyList+0xcc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00e      	beq.n	8003b82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d207      	bcs.n	8003b82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba4 <prvAddNewTaskToReadyList+0xdc>)
 8003b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000c60 	.word	0x20000c60
 8003b90:	2000078c 	.word	0x2000078c
 8003b94:	20000c6c 	.word	0x20000c6c
 8003b98:	20000c7c 	.word	0x20000c7c
 8003b9c:	20000c68 	.word	0x20000c68
 8003ba0:	20000790 	.word	0x20000790
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d018      	beq.n	8003bec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bba:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <vTaskDelay+0x64>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <vTaskDelay+0x32>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	60bb      	str	r3, [r7, #8]
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bda:	f000 f883 	bl	8003ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bde:	2100      	movs	r1, #0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fcf3 	bl	80045cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003be6:	f000 f88b 	bl	8003d00 <xTaskResumeAll>
 8003bea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d107      	bne.n	8003c02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <vTaskDelay+0x68>)
 8003bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000c88 	.word	0x20000c88
 8003c10:	e000ed04 	.word	0xe000ed04

08003c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c22:	463a      	mov	r2, r7
 8003c24:	1d39      	adds	r1, r7, #4
 8003c26:	f107 0308 	add.w	r3, r7, #8
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff f834 	bl	8002c98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c30:	6839      	ldr	r1, [r7, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	9202      	str	r2, [sp, #8]
 8003c38:	9301      	str	r3, [sp, #4]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	460a      	mov	r2, r1
 8003c42:	4922      	ldr	r1, [pc, #136]	@ (8003ccc <vTaskStartScheduler+0xb8>)
 8003c44:	4822      	ldr	r0, [pc, #136]	@ (8003cd0 <vTaskStartScheduler+0xbc>)
 8003c46:	f7ff fe09 	bl	800385c <xTaskCreateStatic>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <vTaskStartScheduler+0xc0>)
 8003c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c50:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <vTaskStartScheduler+0xc0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	e001      	b.n	8003c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c68:	f000 fd04 	bl	8004674 <xTimerCreateTimerTask>
 8003c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d116      	bne.n	8003ca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	613b      	str	r3, [r7, #16]
}
 8003c86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c88:	4b13      	ldr	r3, [pc, #76]	@ (8003cd8 <vTaskStartScheduler+0xc4>)
 8003c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c90:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <vTaskStartScheduler+0xc8>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c96:	4b12      	ldr	r3, [pc, #72]	@ (8003ce0 <vTaskStartScheduler+0xcc>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c9c:	f001 f8d0 	bl	8004e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ca0:	e00f      	b.n	8003cc2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d10b      	bne.n	8003cc2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	e7fd      	b.n	8003cbe <vTaskStartScheduler+0xaa>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0800564c 	.word	0x0800564c
 8003cd0:	08004305 	.word	0x08004305
 8003cd4:	20000c84 	.word	0x20000c84
 8003cd8:	20000c80 	.word	0x20000c80
 8003cdc:	20000c6c 	.word	0x20000c6c
 8003ce0:	20000c64 	.word	0x20000c64

08003ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <vTaskSuspendAll+0x18>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	4a03      	ldr	r2, [pc, #12]	@ (8003cfc <vTaskSuspendAll+0x18>)
 8003cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000c88 	.word	0x20000c88

08003d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d0e:	4b42      	ldr	r3, [pc, #264]	@ (8003e18 <xTaskResumeAll+0x118>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <xTaskResumeAll+0x2e>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	603b      	str	r3, [r7, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d2e:	f001 f92b 	bl	8004f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <xTaskResumeAll+0x118>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	4a37      	ldr	r2, [pc, #220]	@ (8003e18 <xTaskResumeAll+0x118>)
 8003d3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3c:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <xTaskResumeAll+0x118>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d162      	bne.n	8003e0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d44:	4b35      	ldr	r3, [pc, #212]	@ (8003e1c <xTaskResumeAll+0x11c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05e      	beq.n	8003e0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d4c:	e02f      	b.n	8003dae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d4e:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <xTaskResumeAll+0x120>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3318      	adds	r3, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f85a 	bl	8002e14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff f855 	bl	8002e14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e24 <xTaskResumeAll+0x124>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <xTaskResumeAll+0x7e>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <xTaskResumeAll+0x124>)
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4a27      	ldr	r2, [pc, #156]	@ (8003e28 <xTaskResumeAll+0x128>)
 8003d8c:	441a      	add	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fe ffe0 	bl	8002d5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	4b23      	ldr	r3, [pc, #140]	@ (8003e2c <xTaskResumeAll+0x12c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003da8:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <xTaskResumeAll+0x130>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dae:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <xTaskResumeAll+0x120>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1cb      	bne.n	8003d4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dbc:	f000 fb58 	bl	8004470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e34 <xTaskResumeAll+0x134>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d010      	beq.n	8003dee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dcc:	f000 f846 	bl	8003e5c <xTaskIncrementTick>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003dd6:	4b16      	ldr	r3, [pc, #88]	@ (8003e30 <xTaskResumeAll+0x130>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1f1      	bne.n	8003dcc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <xTaskResumeAll+0x134>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dee:	4b10      	ldr	r3, [pc, #64]	@ (8003e30 <xTaskResumeAll+0x130>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003df6:	2301      	movs	r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003e38 <xTaskResumeAll+0x138>)
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e0a:	f001 f8ef 	bl	8004fec <vPortExitCritical>

	return xAlreadyYielded;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000c88 	.word	0x20000c88
 8003e1c:	20000c60 	.word	0x20000c60
 8003e20:	20000c20 	.word	0x20000c20
 8003e24:	20000c68 	.word	0x20000c68
 8003e28:	20000790 	.word	0x20000790
 8003e2c:	2000078c 	.word	0x2000078c
 8003e30:	20000c74 	.word	0x20000c74
 8003e34:	20000c70 	.word	0x20000c70
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e42:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <xTaskGetTickCount+0x1c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e48:	687b      	ldr	r3, [r7, #4]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000c64 	.word	0x20000c64

08003e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e66:	4b4f      	ldr	r3, [pc, #316]	@ (8003fa4 <xTaskIncrementTick+0x148>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 8090 	bne.w	8003f90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e70:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa8 <xTaskIncrementTick+0x14c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3301      	adds	r3, #1
 8003e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e78:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa8 <xTaskIncrementTick+0x14c>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d121      	bne.n	8003ec8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e84:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <xTaskIncrementTick+0x150>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	603b      	str	r3, [r7, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <xTaskIncrementTick+0x46>
 8003ea6:	4b41      	ldr	r3, [pc, #260]	@ (8003fac <xTaskIncrementTick+0x150>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <xTaskIncrementTick+0x154>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fac <xTaskIncrementTick+0x150>)
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb0 <xTaskIncrementTick+0x154>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b3e      	ldr	r3, [pc, #248]	@ (8003fb4 <xTaskIncrementTick+0x158>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fb4 <xTaskIncrementTick+0x158>)
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	f000 fad4 	bl	8004470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb8 <xTaskIncrementTick+0x15c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d349      	bcc.n	8003f66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed2:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <xTaskIncrementTick+0x150>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003edc:	4b36      	ldr	r3, [pc, #216]	@ (8003fb8 <xTaskIncrementTick+0x15c>)
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	601a      	str	r2, [r3, #0]
					break;
 8003ee4:	e03f      	b.n	8003f66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee6:	4b31      	ldr	r3, [pc, #196]	@ (8003fac <xTaskIncrementTick+0x150>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003efe:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb8 <xTaskIncrementTick+0x15c>)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f04:	e02f      	b.n	8003f66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe ff82 	bl	8002e14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3318      	adds	r3, #24
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe ff79 	bl	8002e14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	4b25      	ldr	r3, [pc, #148]	@ (8003fbc <xTaskIncrementTick+0x160>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d903      	bls.n	8003f36 <xTaskIncrementTick+0xda>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f32:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <xTaskIncrementTick+0x160>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <xTaskIncrementTick+0x164>)
 8003f44:	441a      	add	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	f7fe ff04 	bl	8002d5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f56:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc4 <xTaskIncrementTick+0x168>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3b8      	bcc.n	8003ed2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f64:	e7b5      	b.n	8003ed2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f66:	4b17      	ldr	r3, [pc, #92]	@ (8003fc4 <xTaskIncrementTick+0x168>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f6c:	4914      	ldr	r1, [pc, #80]	@ (8003fc0 <xTaskIncrementTick+0x164>)
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d901      	bls.n	8003f82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f82:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <xTaskIncrementTick+0x16c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e004      	b.n	8003f9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <xTaskIncrementTick+0x170>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3301      	adds	r3, #1
 8003f96:	4a0d      	ldr	r2, [pc, #52]	@ (8003fcc <xTaskIncrementTick+0x170>)
 8003f98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f9a:	697b      	ldr	r3, [r7, #20]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000c88 	.word	0x20000c88
 8003fa8:	20000c64 	.word	0x20000c64
 8003fac:	20000c18 	.word	0x20000c18
 8003fb0:	20000c1c 	.word	0x20000c1c
 8003fb4:	20000c78 	.word	0x20000c78
 8003fb8:	20000c80 	.word	0x20000c80
 8003fbc:	20000c68 	.word	0x20000c68
 8003fc0:	20000790 	.word	0x20000790
 8003fc4:	2000078c 	.word	0x2000078c
 8003fc8:	20000c74 	.word	0x20000c74
 8003fcc:	20000c70 	.word	0x20000c70

08003fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fd6:	4b28      	ldr	r3, [pc, #160]	@ (8004078 <vTaskSwitchContext+0xa8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <vTaskSwitchContext+0xac>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fe4:	e042      	b.n	800406c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003fe6:	4b25      	ldr	r3, [pc, #148]	@ (800407c <vTaskSwitchContext+0xac>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	4b24      	ldr	r3, [pc, #144]	@ (8004080 <vTaskSwitchContext+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e011      	b.n	8004018 <vTaskSwitchContext+0x48>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <vTaskSwitchContext+0x42>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	607b      	str	r3, [r7, #4]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <vTaskSwitchContext+0x3e>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b01      	subs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	491a      	ldr	r1, [pc, #104]	@ (8004084 <vTaskSwitchContext+0xb4>)
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0e3      	beq.n	8003ff4 <vTaskSwitchContext+0x24>
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a13      	ldr	r2, [pc, #76]	@ (8004084 <vTaskSwitchContext+0xb4>)
 8004038:	4413      	add	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3308      	adds	r3, #8
 800404e:	429a      	cmp	r2, r3
 8004050:	d104      	bne.n	800405c <vTaskSwitchContext+0x8c>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <vTaskSwitchContext+0xb8>)
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	4a06      	ldr	r2, [pc, #24]	@ (8004080 <vTaskSwitchContext+0xb0>)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	20000c88 	.word	0x20000c88
 800407c:	20000c74 	.word	0x20000c74
 8004080:	20000c68 	.word	0x20000c68
 8004084:	20000790 	.word	0x20000790
 8004088:	2000078c 	.word	0x2000078c

0800408c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10b      	bne.n	80040b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	60fb      	str	r3, [r7, #12]
}
 80040ae:	bf00      	nop
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040b4:	4b07      	ldr	r3, [pc, #28]	@ (80040d4 <vTaskPlaceOnEventList+0x48>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3318      	adds	r3, #24
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7fe fe70 	bl	8002da2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040c2:	2101      	movs	r1, #1
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f000 fa81 	bl	80045cc <prvAddCurrentTaskToDelayedList>
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	2000078c 	.word	0x2000078c

080040d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	617b      	str	r3, [r7, #20]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004102:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <vTaskPlaceOnEventListRestricted+0x54>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3318      	adds	r3, #24
 8004108:	4619      	mov	r1, r3
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f7fe fe25 	bl	8002d5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68b8      	ldr	r0, [r7, #8]
 8004120:	f000 fa54 	bl	80045cc <prvAddCurrentTaskToDelayedList>
	}
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	2000078c 	.word	0x2000078c

08004130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60fb      	str	r3, [r7, #12]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3318      	adds	r3, #24
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe fe56 	bl	8002e14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004168:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <xTaskRemoveFromEventList+0xb0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11d      	bne.n	80041ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3304      	adds	r3, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fe4d 	bl	8002e14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417e:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <xTaskRemoveFromEventList+0xb4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d903      	bls.n	800418e <xTaskRemoveFromEventList+0x5e>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418a:	4a16      	ldr	r2, [pc, #88]	@ (80041e4 <xTaskRemoveFromEventList+0xb4>)
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <xTaskRemoveFromEventList+0xb8>)
 800419c:	441a      	add	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f7fe fdd8 	bl	8002d5a <vListInsertEnd>
 80041aa:	e005      	b.n	80041b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	3318      	adds	r3, #24
 80041b0:	4619      	mov	r1, r3
 80041b2:	480e      	ldr	r0, [pc, #56]	@ (80041ec <xTaskRemoveFromEventList+0xbc>)
 80041b4:	f7fe fdd1 	bl	8002d5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <xTaskRemoveFromEventList+0xc0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d905      	bls.n	80041d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <xTaskRemoveFromEventList+0xc4>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e001      	b.n	80041d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041d6:	697b      	ldr	r3, [r7, #20]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000c88 	.word	0x20000c88
 80041e4:	20000c68 	.word	0x20000c68
 80041e8:	20000790 	.word	0x20000790
 80041ec:	20000c20 	.word	0x20000c20
 80041f0:	2000078c 	.word	0x2000078c
 80041f4:	20000c74 	.word	0x20000c74

080041f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004200:	4b06      	ldr	r3, [pc, #24]	@ (800421c <vTaskInternalSetTimeOutState+0x24>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <vTaskInternalSetTimeOutState+0x28>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	605a      	str	r2, [r3, #4]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000c78 	.word	0x20000c78
 8004220:	20000c64 	.word	0x20000c64

08004224 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10b      	bne.n	800424c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	613b      	str	r3, [r7, #16]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	60fb      	str	r3, [r7, #12]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800426a:	f000 fe8d 	bl	8004f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800426e:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <xTaskCheckForTimeOut+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d102      	bne.n	800428e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	e023      	b.n	80042d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <xTaskCheckForTimeOut+0xc4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d007      	beq.n	80042aa <xTaskCheckForTimeOut+0x86>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d302      	bcc.n	80042aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042a4:	2301      	movs	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e015      	b.n	80042d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d20b      	bcs.n	80042cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff99 	bl	80041f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
 80042ca:	e004      	b.n	80042d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042d2:	2301      	movs	r3, #1
 80042d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042d6:	f000 fe89 	bl	8004fec <vPortExitCritical>

	return xReturn;
 80042da:	69fb      	ldr	r3, [r7, #28]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3720      	adds	r7, #32
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000c64 	.word	0x20000c64
 80042e8:	20000c78 	.word	0x20000c78

080042ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042f0:	4b03      	ldr	r3, [pc, #12]	@ (8004300 <vTaskMissedYield+0x14>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20000c74 	.word	0x20000c74

08004304 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800430c:	f000 f852 	bl	80043b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <prvIdleTask+0x28>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d9f9      	bls.n	800430c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <prvIdleTask+0x2c>)
 800431a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004328:	e7f0      	b.n	800430c <prvIdleTask+0x8>
 800432a:	bf00      	nop
 800432c:	20000790 	.word	0x20000790
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	e00c      	b.n	800435a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <prvInitialiseTaskLists+0x60>)
 800434c:	4413      	add	r3, r2
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fcd6 	bl	8002d00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3301      	adds	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b37      	cmp	r3, #55	@ 0x37
 800435e:	d9ef      	bls.n	8004340 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004360:	480d      	ldr	r0, [pc, #52]	@ (8004398 <prvInitialiseTaskLists+0x64>)
 8004362:	f7fe fccd 	bl	8002d00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004366:	480d      	ldr	r0, [pc, #52]	@ (800439c <prvInitialiseTaskLists+0x68>)
 8004368:	f7fe fcca 	bl	8002d00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800436c:	480c      	ldr	r0, [pc, #48]	@ (80043a0 <prvInitialiseTaskLists+0x6c>)
 800436e:	f7fe fcc7 	bl	8002d00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004372:	480c      	ldr	r0, [pc, #48]	@ (80043a4 <prvInitialiseTaskLists+0x70>)
 8004374:	f7fe fcc4 	bl	8002d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004378:	480b      	ldr	r0, [pc, #44]	@ (80043a8 <prvInitialiseTaskLists+0x74>)
 800437a:	f7fe fcc1 	bl	8002d00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800437e:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <prvInitialiseTaskLists+0x78>)
 8004380:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <prvInitialiseTaskLists+0x64>)
 8004382:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004384:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <prvInitialiseTaskLists+0x7c>)
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <prvInitialiseTaskLists+0x68>)
 8004388:	601a      	str	r2, [r3, #0]
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000790 	.word	0x20000790
 8004398:	20000bf0 	.word	0x20000bf0
 800439c:	20000c04 	.word	0x20000c04
 80043a0:	20000c20 	.word	0x20000c20
 80043a4:	20000c34 	.word	0x20000c34
 80043a8:	20000c4c 	.word	0x20000c4c
 80043ac:	20000c18 	.word	0x20000c18
 80043b0:	20000c1c 	.word	0x20000c1c

080043b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ba:	e019      	b.n	80043f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043bc:	f000 fde4 	bl	8004f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <prvCheckTasksWaitingTermination+0x50>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fd21 	bl	8002e14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <prvCheckTasksWaitingTermination+0x54>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004408 <prvCheckTasksWaitingTermination+0x54>)
 80043da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <prvCheckTasksWaitingTermination+0x58>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	4a0a      	ldr	r2, [pc, #40]	@ (800440c <prvCheckTasksWaitingTermination+0x58>)
 80043e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043e6:	f000 fe01 	bl	8004fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f810 	bl	8004410 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <prvCheckTasksWaitingTermination+0x58>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e1      	bne.n	80043bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000c34 	.word	0x20000c34
 8004408:	20000c60 	.word	0x20000c60
 800440c:	20000c48 	.word	0x20000c48

08004410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800441e:	2b00      	cmp	r3, #0
 8004420:	d108      	bne.n	8004434 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	4618      	mov	r0, r3
 8004428:	f000 ff9e 	bl	8005368 <vPortFree>
				vPortFree( pxTCB );
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 ff9b 	bl	8005368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004432:	e019      	b.n	8004468 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800443a:	2b01      	cmp	r3, #1
 800443c:	d103      	bne.n	8004446 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 ff92 	bl	8005368 <vPortFree>
	}
 8004444:	e010      	b.n	8004468 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800444c:	2b02      	cmp	r3, #2
 800444e:	d00b      	beq.n	8004468 <prvDeleteTCB+0x58>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	60fb      	str	r3, [r7, #12]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <prvDeleteTCB+0x54>
	}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004476:	4b0c      	ldr	r3, [pc, #48]	@ (80044a8 <prvResetNextTaskUnblockTime+0x38>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004480:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <prvResetNextTaskUnblockTime+0x3c>)
 8004482:	f04f 32ff 	mov.w	r2, #4294967295
 8004486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004488:	e008      	b.n	800449c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <prvResetNextTaskUnblockTime+0x38>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a04      	ldr	r2, [pc, #16]	@ (80044ac <prvResetNextTaskUnblockTime+0x3c>)
 800449a:	6013      	str	r3, [r2, #0]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000c18 	.word	0x20000c18
 80044ac:	20000c80 	.word	0x20000c80

080044b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044b6:	4b0b      	ldr	r3, [pc, #44]	@ (80044e4 <xTaskGetSchedulerState+0x34>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044be:	2301      	movs	r3, #1
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	e008      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c4:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <xTaskGetSchedulerState+0x38>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d102      	bne.n	80044d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044cc:	2302      	movs	r3, #2
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	e001      	b.n	80044d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044d6:	687b      	ldr	r3, [r7, #4]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000c6c 	.word	0x20000c6c
 80044e8:	20000c88 	.word	0x20000c88

080044ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d058      	beq.n	80045b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004502:	4b2f      	ldr	r3, [pc, #188]	@ (80045c0 <xTaskPriorityDisinherit+0xd4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	429a      	cmp	r2, r3
 800450a:	d00b      	beq.n	8004524 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60fb      	str	r3, [r7, #12]
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60bb      	str	r3, [r7, #8]
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	1e5a      	subs	r2, r3, #1
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	429a      	cmp	r2, r3
 8004558:	d02c      	beq.n	80045b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800455e:	2b00      	cmp	r3, #0
 8004560:	d128      	bne.n	80045b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	3304      	adds	r3, #4
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe fc54 	bl	8002e14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004584:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <xTaskPriorityDisinherit+0xd8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	d903      	bls.n	8004594 <xTaskPriorityDisinherit+0xa8>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <xTaskPriorityDisinherit+0xd8>)
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <xTaskPriorityDisinherit+0xdc>)
 80045a2:	441a      	add	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe fbd5 	bl	8002d5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045b4:	697b      	ldr	r3, [r7, #20]
	}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	2000078c 	.word	0x2000078c
 80045c4:	20000c68 	.word	0x20000c68
 80045c8:	20000790 	.word	0x20000790

080045cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <prvAddCurrentTaskToDelayedList+0x90>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045dc:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe fc16 	bl	8002e14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d10a      	bne.n	8004606 <prvAddCurrentTaskToDelayedList+0x3a>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4819      	ldr	r0, [pc, #100]	@ (8004664 <prvAddCurrentTaskToDelayedList+0x98>)
 8004600:	f7fe fbab 	bl	8002d5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004604:	e026      	b.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	429a      	cmp	r2, r3
 800461c:	d209      	bcs.n	8004632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe fbb9 	bl	8002da2 <vListInsert>
}
 8004630:	e010      	b.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe fbaf 	bl	8002da2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004644:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d202      	bcs.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000c64 	.word	0x20000c64
 8004660:	2000078c 	.word	0x2000078c
 8004664:	20000c4c 	.word	0x20000c4c
 8004668:	20000c1c 	.word	0x20000c1c
 800466c:	20000c18 	.word	0x20000c18
 8004670:	20000c80 	.word	0x20000c80

08004674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800467e:	f000 fb13 	bl	8004ca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <xTimerCreateTimerTask+0x84>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d021      	beq.n	80046ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004692:	1d3a      	adds	r2, r7, #4
 8004694:	f107 0108 	add.w	r1, r7, #8
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fb15 	bl	8002ccc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	9202      	str	r2, [sp, #8]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	2302      	movs	r3, #2
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2300      	movs	r3, #0
 80046b2:	460a      	mov	r2, r1
 80046b4:	4911      	ldr	r1, [pc, #68]	@ (80046fc <xTimerCreateTimerTask+0x88>)
 80046b6:	4812      	ldr	r0, [pc, #72]	@ (8004700 <xTimerCreateTimerTask+0x8c>)
 80046b8:	f7ff f8d0 	bl	800385c <xTaskCreateStatic>
 80046bc:	4603      	mov	r3, r0
 80046be:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <xTimerCreateTimerTask+0x90>)
 80046c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046c2:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <xTimerCreateTimerTask+0x90>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046ca:	2301      	movs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000cbc 	.word	0x20000cbc
 80046fc:	08005654 	.word	0x08005654
 8004700:	08004841 	.word	0x08004841
 8004704:	20000cc0 	.word	0x20000cc0

08004708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	@ 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xTimerGenericCommand+0x30>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <xTimerGenericCommand+0x98>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02a      	beq.n	8004796 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b05      	cmp	r3, #5
 8004750:	dc18      	bgt.n	8004784 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004752:	f7ff fead 	bl	80044b0 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b02      	cmp	r3, #2
 800475a:	d109      	bne.n	8004770 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800475c:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <xTimerGenericCommand+0x98>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	f107 0110 	add.w	r1, r7, #16
 8004764:	2300      	movs	r3, #0
 8004766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004768:	f7fe fc88 	bl	800307c <xQueueGenericSend>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24
 800476e:	e012      	b.n	8004796 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <xTimerGenericCommand+0x98>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	f107 0110 	add.w	r1, r7, #16
 8004778:	2300      	movs	r3, #0
 800477a:	2200      	movs	r2, #0
 800477c:	f7fe fc7e 	bl	800307c <xQueueGenericSend>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24
 8004782:	e008      	b.n	8004796 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <xTimerGenericCommand+0x98>)
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	f107 0110 	add.w	r1, r7, #16
 800478c:	2300      	movs	r3, #0
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	f7fe fd76 	bl	8003280 <xQueueGenericSendFromISR>
 8004794:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	@ 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000cbc 	.word	0x20000cbc

080047a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <prvProcessExpiredTimer+0x98>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fb29 	bl	8002e14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d023      	beq.n	8004818 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	18d1      	adds	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	f000 f8d5 	bl	800498c <prvInsertTimerInActiveList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff88 	bl	8004708 <xTimerGenericCommand>
 80047f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	b2da      	uxtb	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	4798      	blx	r3
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000cb4 	.word	0x20000cb4

08004840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f859 	bl	8004904 <prvGetNextExpireTime>
 8004852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f805 	bl	8004868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800485e:	f000 f8d7 	bl	8004a10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004862:	bf00      	nop
 8004864:	e7f0      	b.n	8004848 <prvTimerTask+0x8>
	...

08004868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004872:	f7ff fa37 	bl	8003ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004876:	f107 0308 	add.w	r3, r7, #8
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f866 	bl	800494c <prvSampleTimeNow>
 8004880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d130      	bne.n	80048ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <prvProcessTimerOrBlockTask+0x3c>
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	429a      	cmp	r2, r3
 8004894:	d806      	bhi.n	80048a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004896:	f7ff fa33 	bl	8003d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff81 	bl	80047a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048a2:	e024      	b.n	80048ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048aa:	4b13      	ldr	r3, [pc, #76]	@ (80048f8 <prvProcessTimerOrBlockTask+0x90>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <prvProcessTimerOrBlockTask+0x50>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <prvProcessTimerOrBlockTask+0x52>
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048bc:	4b0f      	ldr	r3, [pc, #60]	@ (80048fc <prvProcessTimerOrBlockTask+0x94>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f7fe ff93 	bl	80037f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048ce:	f7ff fa17 	bl	8003d00 <xTaskResumeAll>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <prvProcessTimerOrBlockTask+0x98>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
}
 80048e8:	e001      	b.n	80048ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ea:	f7ff fa09 	bl	8003d00 <xTaskResumeAll>
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000cb8 	.word	0x20000cb8
 80048fc:	20000cbc 	.word	0x20000cbc
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <prvGetNextExpireTime+0x44>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <prvGetNextExpireTime+0x16>
 8004916:	2201      	movs	r2, #1
 8004918:	e000      	b.n	800491c <prvGetNextExpireTime+0x18>
 800491a:	2200      	movs	r2, #0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <prvGetNextExpireTime+0x44>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e001      	b.n	8004938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004938:	68fb      	ldr	r3, [r7, #12]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000cb4 	.word	0x20000cb4

0800494c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004954:	f7ff fa72 	bl	8003e3c <xTaskGetTickCount>
 8004958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <prvSampleTimeNow+0x3c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d205      	bcs.n	8004970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004964:	f000 f93a 	bl	8004bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e002      	b.n	8004976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004976:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <prvSampleTimeNow+0x3c>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000cc4 	.word	0x20000cc4

0800498c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d812      	bhi.n	80049d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e01b      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <prvInsertTimerInActiveList+0x7c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7fe f9e6 	bl	8002da2 <vListInsert>
 80049d6:	e012      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d206      	bcs.n	80049ee <prvInsertTimerInActiveList+0x62>
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e007      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ee:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <prvInsertTimerInActiveList+0x80>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fe f9d2 	bl	8002da2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049fe:	697b      	ldr	r3, [r7, #20]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000cb8 	.word	0x20000cb8
 8004a0c:	20000cb4 	.word	0x20000cb4

08004a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	@ 0x38
 8004a14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a16:	e0ce      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da19      	bge.n	8004a52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	3304      	adds	r3, #4
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61fb      	str	r3, [r7, #28]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a48:	6850      	ldr	r0, [r2, #4]
 8004a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a4c:	6892      	ldr	r2, [r2, #8]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f2c0 80ae 	blt.w	8004bb6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe f9d2 	bl	8002e14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a70:	463b      	mov	r3, r7
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff6a 	bl	800494c <prvSampleTimeNow>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	f200 8097 	bhi.w	8004bb0 <prvProcessReceivedCommands+0x1a0>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <prvProcessReceivedCommands+0x78>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004b27 	.word	0x08004b27
 8004a98:	08004b3b 	.word	0x08004b3b
 8004a9c:	08004b87 	.word	0x08004b87
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ab1 	.word	0x08004ab1
 8004aa8:	08004b27 	.word	0x08004b27
 8004aac:	08004b3b 	.word	0x08004b3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	18d1      	adds	r1, r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad0:	f7ff ff5c 	bl	800498c <prvInsertTimerInActiveList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d06c      	beq.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d061      	beq.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	441a      	add	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b02:	f7ff fe01 	bl	8004708 <xTimerGenericCommand>
 8004b06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d152      	bne.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61bb      	str	r3, [r7, #24]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b38:	e03d      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	617b      	str	r3, [r7, #20]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f7ff ff04 	bl	800498c <prvInsertTimerInActiveList>
					break;
 8004b84:	e017      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b96:	f000 fbe7 	bl	8005368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b9a:	e00c      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bae:	e002      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <prvProcessReceivedCommands+0x1c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d39      	adds	r1, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fbfc 	bl	80033bc <xQueueReceive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af26 	bne.w	8004a18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3730      	adds	r7, #48	@ 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000cbc 	.word	0x20000cbc

08004bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be2:	e049      	b.n	8004c78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe f909 	bl	8002e14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02f      	beq.n	8004c78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90e      	bls.n	8004c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fe f8ae 	bl	8002da2 <vListInsert>
 8004c46:	e017      	b.n	8004c78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	2100      	movs	r1, #0
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fd58 	bl	8004708 <xTimerGenericCommand>
 8004c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	603b      	str	r3, [r7, #0]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1b0      	bne.n	8004be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <prvSwitchTimerLists+0xc8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c90:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <prvSwitchTimerLists+0xc8>)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6013      	str	r3, [r2, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000cb4 	.word	0x20000cb4
 8004ca4:	20000cb8 	.word	0x20000cb8

08004ca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cae:	f000 f96b 	bl	8004f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d120      	bne.n	8004cfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cba:	4814      	ldr	r0, [pc, #80]	@ (8004d0c <prvCheckForValidListAndQueue+0x64>)
 8004cbc:	f7fe f820 	bl	8002d00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cc0:	4813      	ldr	r0, [pc, #76]	@ (8004d10 <prvCheckForValidListAndQueue+0x68>)
 8004cc2:	f7fe f81d 	bl	8002d00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cc6:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <prvCheckForValidListAndQueue+0x6c>)
 8004cc8:	4a10      	ldr	r2, [pc, #64]	@ (8004d0c <prvCheckForValidListAndQueue+0x64>)
 8004cca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <prvCheckForValidListAndQueue+0x70>)
 8004cce:	4a10      	ldr	r2, [pc, #64]	@ (8004d10 <prvCheckForValidListAndQueue+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4b11      	ldr	r3, [pc, #68]	@ (8004d1c <prvCheckForValidListAndQueue+0x74>)
 8004cd8:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <prvCheckForValidListAndQueue+0x78>)
 8004cda:	2110      	movs	r1, #16
 8004cdc:	200a      	movs	r0, #10
 8004cde:	f7fe f92d 	bl	8002f3c <xQueueGenericCreateStatic>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004ce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	490b      	ldr	r1, [pc, #44]	@ (8004d24 <prvCheckForValidListAndQueue+0x7c>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fd52 	bl	80037a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cfc:	f000 f976 	bl	8004fec <vPortExitCritical>
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000cbc 	.word	0x20000cbc
 8004d0c:	20000c8c 	.word	0x20000c8c
 8004d10:	20000ca0 	.word	0x20000ca0
 8004d14:	20000cb4 	.word	0x20000cb4
 8004d18:	20000cb8 	.word	0x20000cb8
 8004d1c:	20000d68 	.word	0x20000d68
 8004d20:	20000cc8 	.word	0x20000cc8
 8004d24:	0800565c 	.word	0x0800565c

08004d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b04      	subs	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d58:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <pxPortInitialiseStack+0x64>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b14      	subs	r3, #20
 8004d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f06f 0202 	mvn.w	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b20      	subs	r3, #32
 8004d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	08004d91 	.word	0x08004d91

08004d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d9a:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <prvTaskExitError+0x58>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d00b      	beq.n	8004dbc <prvTaskExitError+0x2c>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <prvTaskExitError+0x28>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
}
 8004dce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dd0:	bf00      	nop
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0fc      	beq.n	8004dd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c
 8004dec:	00000000 	.word	0x00000000

08004df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004df0:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <pxCurrentTCBConst2>)
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f380 8809 	msr	PSP, r0
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8811 	msr	BASEPRI, r0
 8004e0a:	4770      	bx	lr
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst2>:
 8004e10:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e18:	4808      	ldr	r0, [pc, #32]	@ (8004e3c <prvPortStartFirstTask+0x24>)
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f380 8808 	msr	MSP, r0
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8814 	msr	CONTROL, r0
 8004e2a:	b662      	cpsie	i
 8004e2c:	b661      	cpsie	f
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	df00      	svc	0
 8004e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e3a:	bf00      	nop
 8004e3c:	e000ed08 	.word	0xe000ed08

08004e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e46:	4b47      	ldr	r3, [pc, #284]	@ (8004f64 <xPortStartScheduler+0x124>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a47      	ldr	r2, [pc, #284]	@ (8004f68 <xPortStartScheduler+0x128>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10b      	bne.n	8004e68 <xPortStartScheduler+0x28>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e68:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <xPortStartScheduler+0x124>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f6c <xPortStartScheduler+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d10b      	bne.n	8004e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	613b      	str	r3, [r7, #16]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e8a:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <xPortStartScheduler+0x130>)
 8004e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	22ff      	movs	r2, #255	@ 0xff
 8004e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4b31      	ldr	r3, [pc, #196]	@ (8004f74 <xPortStartScheduler+0x134>)
 8004eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb8:	e009      	b.n	8004ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004eba:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d0ef      	beq.n	8004eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eda:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1c3 0307 	rsb	r3, r3, #7
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d00b      	beq.n	8004efe <xPortStartScheduler+0xbe>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60bb      	str	r3, [r7, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	e7fd      	b.n	8004efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004efe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f1c:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f34:	f000 f8da 	bl	80050ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <xPortStartScheduler+0x140>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f3e:	f000 f8f9 	bl	8005134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <xPortStartScheduler+0x144>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a0f      	ldr	r2, [pc, #60]	@ (8004f84 <xPortStartScheduler+0x144>)
 8004f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f4e:	f7ff ff63 	bl	8004e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f52:	f7ff f83d 	bl	8003fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f56:	f7ff ff1b 	bl	8004d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	e000ed00 	.word	0xe000ed00
 8004f68:	410fc271 	.word	0x410fc271
 8004f6c:	410fc270 	.word	0x410fc270
 8004f70:	e000e400 	.word	0xe000e400
 8004f74:	20000db8 	.word	0x20000db8
 8004f78:	20000dbc 	.word	0x20000dbc
 8004f7c:	e000ed20 	.word	0xe000ed20
 8004f80:	2000000c 	.word	0x2000000c
 8004f84:	e000ef34 	.word	0xe000ef34

08004f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d110      	bne.n	8004fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <vPortEnterCritical+0x60>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	603b      	str	r3, [r7, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <vPortEnterCritical+0x4a>
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ff2:	4b12      	ldr	r3, [pc, #72]	@ (800503c <vPortExitCritical+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <vPortExitCritical+0x26>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	4a08      	ldr	r2, [pc, #32]	@ (800503c <vPortExitCritical+0x50>)
 800501a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <vPortExitCritical+0x50>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <vPortExitCritical+0x44>
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	2000000c 	.word	0x2000000c

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7fe ffae 	bl	8003fd0 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f7fe fecb 	bl	8003e5c <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050cc:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <xPortSysTickHandler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	@ (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510e:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005142:	bf00      	nop
 8005144:	e000ed88 	.word	0xe000ed88

08005148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800514e:	f3ef 8305 	mrs	r3, IPSR
 8005152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d915      	bls.n	8005186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800515a:	4a18      	ldr	r2, [pc, #96]	@ (80051bc <vPortValidateInterruptPriority+0x74>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005164:	4b16      	ldr	r3, [pc, #88]	@ (80051c0 <vPortValidateInterruptPriority+0x78>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	7afa      	ldrb	r2, [r7, #11]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20b      	bcs.n	8005186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <vPortValidateInterruptPriority+0x7c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <vPortValidateInterruptPriority+0x80>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d90b      	bls.n	80051ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	603b      	str	r3, [r7, #0]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vPortValidateInterruptPriority+0x62>
	}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e3f0 	.word	0xe000e3f0
 80051c0:	20000db8 	.word	0x20000db8
 80051c4:	e000ed0c 	.word	0xe000ed0c
 80051c8:	20000dbc 	.word	0x20000dbc

080051cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051d8:	f7fe fd84 	bl	8003ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005350 <pvPortMalloc+0x184>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e4:	f000 f924 	bl	8005430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <pvPortMalloc+0x188>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8095 	bne.w	8005320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01e      	beq.n	800523a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051fc:	2208      	movs	r2, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	2b00      	cmp	r3, #0
 800520c:	d015      	beq.n	800523a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	3308      	adds	r3, #8
 8005216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <pvPortMalloc+0x6e>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	617b      	str	r3, [r7, #20]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d06f      	beq.n	8005320 <pvPortMalloc+0x154>
 8005240:	4b45      	ldr	r3, [pc, #276]	@ (8005358 <pvPortMalloc+0x18c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d86a      	bhi.n	8005320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800524a:	4b44      	ldr	r3, [pc, #272]	@ (800535c <pvPortMalloc+0x190>)
 800524c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800524e:	4b43      	ldr	r3, [pc, #268]	@ (800535c <pvPortMalloc+0x190>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005254:	e004      	b.n	8005260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d903      	bls.n	8005272 <pvPortMalloc+0xa6>
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f1      	bne.n	8005256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005272:	4b37      	ldr	r3, [pc, #220]	@ (8005350 <pvPortMalloc+0x184>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	429a      	cmp	r2, r3
 800527a:	d051      	beq.n	8005320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	2308      	movs	r3, #8
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	429a      	cmp	r2, r3
 800529c:	d920      	bls.n	80052e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <pvPortMalloc+0xfc>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052da:	69b8      	ldr	r0, [r7, #24]
 80052dc:	f000 f90a 	bl	80054f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <pvPortMalloc+0x18c>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <pvPortMalloc+0x18c>)
 80052ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <pvPortMalloc+0x18c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <pvPortMalloc+0x194>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d203      	bcs.n	8005302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052fa:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <pvPortMalloc+0x18c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a18      	ldr	r2, [pc, #96]	@ (8005360 <pvPortMalloc+0x194>)
 8005300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <pvPortMalloc+0x188>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005316:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <pvPortMalloc+0x198>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a11      	ldr	r2, [pc, #68]	@ (8005364 <pvPortMalloc+0x198>)
 800531e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005320:	f7fe fcee 	bl	8003d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <pvPortMalloc+0x17a>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <pvPortMalloc+0x176>
	return pvReturn;
 8005346:	69fb      	ldr	r3, [r7, #28]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	@ 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200049c8 	.word	0x200049c8
 8005354:	200049dc 	.word	0x200049dc
 8005358:	200049cc 	.word	0x200049cc
 800535c:	200049c0 	.word	0x200049c0
 8005360:	200049d0 	.word	0x200049d0
 8005364:	200049d4 	.word	0x200049d4

08005368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04f      	beq.n	800541a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800537a:	2308      	movs	r3, #8
 800537c:	425b      	negs	r3, r3
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <vPortFree+0xbc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <vPortFree+0x46>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <vPortFree+0x66>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60bb      	str	r3, [r7, #8]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <vPortFree+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01e      	beq.n	800541a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11a      	bne.n	800541a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <vPortFree+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	401a      	ands	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f4:	f7fe fc76 	bl	8003ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <vPortFree+0xc0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4413      	add	r3, r2
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <vPortFree+0xc0>)
 8005404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005406:	6938      	ldr	r0, [r7, #16]
 8005408:	f000 f874 	bl	80054f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vPortFree+0xc4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	4a06      	ldr	r2, [pc, #24]	@ (800542c <vPortFree+0xc4>)
 8005414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005416:	f7fe fc73 	bl	8003d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200049dc 	.word	0x200049dc
 8005428:	200049cc 	.word	0x200049cc
 800542c:	200049d8 	.word	0x200049d8

08005430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800543a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800543c:	4b27      	ldr	r3, [pc, #156]	@ (80054dc <prvHeapInit+0xac>)
 800543e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3307      	adds	r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	4a1f      	ldr	r2, [pc, #124]	@ (80054dc <prvHeapInit+0xac>)
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <prvHeapInit+0xb0>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800546e:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <prvHeapInit+0xb0>)
 8005470:	2200      	movs	r2, #0
 8005472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4413      	add	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800547c:	2208      	movs	r2, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a15      	ldr	r2, [pc, #84]	@ (80054e4 <prvHeapInit+0xb4>)
 8005490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <prvHeapInit+0xb4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549a:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <prvHeapInit+0xb4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <prvHeapInit+0xb4>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <prvHeapInit+0xb8>)
 80054be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a09      	ldr	r2, [pc, #36]	@ (80054ec <prvHeapInit+0xbc>)
 80054c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054c8:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <prvHeapInit+0xc0>)
 80054ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000dc0 	.word	0x20000dc0
 80054e0:	200049c0 	.word	0x200049c0
 80054e4:	200049c8 	.word	0x200049c8
 80054e8:	200049d0 	.word	0x200049d0
 80054ec:	200049cc 	.word	0x200049cc
 80054f0:	200049dc 	.word	0x200049dc

080054f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054fc:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <prvInsertBlockIntoFreeList+0xac>)
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e002      	b.n	8005508 <prvInsertBlockIntoFreeList+0x14>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	d8f7      	bhi.n	8005502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d108      	bne.n	8005536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d118      	bne.n	800557c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d00d      	beq.n	8005572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e008      	b.n	8005584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e003      	b.n	8005584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d002      	beq.n	8005592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	200049c0 	.word	0x200049c0
 80055a4:	200049c8 	.word	0x200049c8

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	@ (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	@ (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	@ (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	@ (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 f826 	bl	800561c <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	080056c4 	.word	0x080056c4
 80055f4:	080056c4 	.word	0x080056c4
 80055f8:	080056c4 	.word	0x080056c4
 80055fc:	080056c8 	.word	0x080056c8

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005616:	4291      	cmp	r1, r2
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
